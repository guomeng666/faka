/* soapH.h
   Generated by gSOAP 2.8.59 for mySap.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_bool_DEFINED
#define SOAP_TYPE_bool_DEFINED

inline void soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);
SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);
SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

inline int soap_write_bool(struct soap *soap, bool const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_bool(struct soap *soap, const char *URL, bool const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_bool(soap, p, "boolean", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

inline int soap_read_bool(struct soap *soap, bool *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_bool(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_bool(struct soap *soap, const char *URL, bool *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_bool(struct soap *soap, bool *p)
{
	if (::soap_read_bool(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__user_DEFINED
#define SOAP_TYPE_web__user_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__user(struct soap*, const char*, int, const web__user *, const char*);
SOAP_FMAC3 web__user * SOAP_FMAC4 soap_in_web__user(struct soap*, const char*, web__user *, const char*);
SOAP_FMAC1 web__user * SOAP_FMAC2 soap_instantiate_web__user(struct soap*, int, const char*, const char*, size_t*);

inline web__user * soap_new_web__user(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__user(soap, n, NULL, NULL, NULL);
}

inline web__user * soap_new_req_web__user(
	struct soap *soap,
	int AD_USCOREClient_USCOREID,
	int AD_USCOREOrg_USCOREID,
	int AD_USCOREROLE_USCOREID,
	int AD_USCOREUSER_USCOREID)
{
	web__user *_p = ::soap_new_web__user(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__user::AD_USCOREClient_USCOREID = AD_USCOREClient_USCOREID;
		_p->web__user::AD_USCOREOrg_USCOREID = AD_USCOREOrg_USCOREID;
		_p->web__user::AD_USCOREROLE_USCOREID = AD_USCOREROLE_USCOREID;
		_p->web__user::AD_USCOREUSER_USCOREID = AD_USCOREUSER_USCOREID;
	}
	return _p;
}

inline web__user * soap_new_set_web__user(
	struct soap *soap,
	int AD_USCOREClient_USCOREID,
	int AD_USCOREOrg_USCOREID,
	int AD_USCOREROLE_USCOREID,
	int AD_USCOREUSER_USCOREID,
	std::string *MESSAGE,
	std::string *NAME)
{
	web__user *_p = ::soap_new_web__user(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__user::AD_USCOREClient_USCOREID = AD_USCOREClient_USCOREID;
		_p->web__user::AD_USCOREOrg_USCOREID = AD_USCOREOrg_USCOREID;
		_p->web__user::AD_USCOREROLE_USCOREID = AD_USCOREROLE_USCOREID;
		_p->web__user::AD_USCOREUSER_USCOREID = AD_USCOREUSER_USCOREID;
		_p->web__user::MESSAGE = MESSAGE;
		_p->web__user::NAME = NAME;
	}
	return _p;
}

inline int soap_write_web__user(struct soap *soap, web__user const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:user", p->soap_type() == SOAP_TYPE_web__user ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__user(struct soap *soap, const char *URL, web__user const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:user", p->soap_type() == SOAP_TYPE_web__user ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__user(struct soap *soap, const char *URL, web__user const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:user", p->soap_type() == SOAP_TYPE_web__user ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__user * SOAP_FMAC4 soap_get_web__user(struct soap*, web__user *, const char*, const char*);

inline int soap_read_web__user(struct soap *soap, web__user *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__user(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__user(struct soap *soap, const char *URL, web__user *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__user(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__user(struct soap *soap, web__user *p)
{
	if (::soap_read_web__user(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__loginResponse_DEFINED
#define SOAP_TYPE_web__loginResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__loginResponse(struct soap*, const char*, int, const web__loginResponse *, const char*);
SOAP_FMAC3 web__loginResponse * SOAP_FMAC4 soap_in_web__loginResponse(struct soap*, const char*, web__loginResponse *, const char*);
SOAP_FMAC1 web__loginResponse * SOAP_FMAC2 soap_instantiate_web__loginResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__loginResponse * soap_new_web__loginResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__loginResponse(soap, n, NULL, NULL, NULL);
}

inline web__loginResponse * soap_new_req_web__loginResponse(
	struct soap *soap)
{
	web__loginResponse *_p = ::soap_new_web__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__loginResponse * soap_new_set_web__loginResponse(
	struct soap *soap,
	web__user *return_)
{
	web__loginResponse *_p = ::soap_new_web__loginResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__loginResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__loginResponse(struct soap *soap, web__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:loginResponse", p->soap_type() == SOAP_TYPE_web__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__loginResponse(struct soap *soap, const char *URL, web__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:loginResponse", p->soap_type() == SOAP_TYPE_web__loginResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__loginResponse(struct soap *soap, const char *URL, web__loginResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:loginResponse", p->soap_type() == SOAP_TYPE_web__loginResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__loginResponse * SOAP_FMAC4 soap_get_web__loginResponse(struct soap*, web__loginResponse *, const char*, const char*);

inline int soap_read_web__loginResponse(struct soap *soap, web__loginResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__loginResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__loginResponse(struct soap *soap, const char *URL, web__loginResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__loginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__loginResponse(struct soap *soap, web__loginResponse *p)
{
	if (::soap_read_web__loginResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__login_DEFINED
#define SOAP_TYPE_web__login_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__login(struct soap*, const char*, int, const web__login *, const char*);
SOAP_FMAC3 web__login * SOAP_FMAC4 soap_in_web__login(struct soap*, const char*, web__login *, const char*);
SOAP_FMAC1 web__login * SOAP_FMAC2 soap_instantiate_web__login(struct soap*, int, const char*, const char*, size_t*);

inline web__login * soap_new_web__login(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__login(soap, n, NULL, NULL, NULL);
}

inline web__login * soap_new_req_web__login(
	struct soap *soap)
{
	web__login *_p = ::soap_new_web__login(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__login * soap_new_set_web__login(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1)
{
	web__login *_p = ::soap_new_web__login(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__login::arg0 = arg0;
		_p->web__login::arg1 = arg1;
	}
	return _p;
}

inline int soap_write_web__login(struct soap *soap, web__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:login", p->soap_type() == SOAP_TYPE_web__login ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__login(struct soap *soap, const char *URL, web__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:login", p->soap_type() == SOAP_TYPE_web__login ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__login(struct soap *soap, const char *URL, web__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:login", p->soap_type() == SOAP_TYPE_web__login ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__login * SOAP_FMAC4 soap_get_web__login(struct soap*, web__login *, const char*, const char*);

inline int soap_read_web__login(struct soap *soap, web__login *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__login(struct soap *soap, const char *URL, web__login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__login(struct soap *soap, web__login *p)
{
	if (::soap_read_web__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveVehicleInfoResponse_DEFINED
#define SOAP_TYPE_web__saveVehicleInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveVehicleInfoResponse(struct soap*, const char*, int, const web__saveVehicleInfoResponse *, const char*);
SOAP_FMAC3 web__saveVehicleInfoResponse * SOAP_FMAC4 soap_in_web__saveVehicleInfoResponse(struct soap*, const char*, web__saveVehicleInfoResponse *, const char*);
SOAP_FMAC1 web__saveVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_web__saveVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__saveVehicleInfoResponse * soap_new_web__saveVehicleInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveVehicleInfoResponse(soap, n, NULL, NULL, NULL);
}

inline web__saveVehicleInfoResponse * soap_new_req_web__saveVehicleInfoResponse(
	struct soap *soap)
{
	web__saveVehicleInfoResponse *_p = ::soap_new_web__saveVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveVehicleInfoResponse * soap_new_set_web__saveVehicleInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	web__saveVehicleInfoResponse *_p = ::soap_new_web__saveVehicleInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveVehicleInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__saveVehicleInfoResponse(struct soap *soap, web__saveVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfoResponse", p->soap_type() == SOAP_TYPE_web__saveVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveVehicleInfoResponse(struct soap *soap, const char *URL, web__saveVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfoResponse", p->soap_type() == SOAP_TYPE_web__saveVehicleInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveVehicleInfoResponse(struct soap *soap, const char *URL, web__saveVehicleInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfoResponse", p->soap_type() == SOAP_TYPE_web__saveVehicleInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveVehicleInfoResponse * SOAP_FMAC4 soap_get_web__saveVehicleInfoResponse(struct soap*, web__saveVehicleInfoResponse *, const char*, const char*);

inline int soap_read_web__saveVehicleInfoResponse(struct soap *soap, web__saveVehicleInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveVehicleInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveVehicleInfoResponse(struct soap *soap, const char *URL, web__saveVehicleInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveVehicleInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveVehicleInfoResponse(struct soap *soap, web__saveVehicleInfoResponse *p)
{
	if (::soap_read_web__saveVehicleInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveVehicleInfo_DEFINED
#define SOAP_TYPE_web__saveVehicleInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveVehicleInfo(struct soap*, const char*, int, const web__saveVehicleInfo *, const char*);
SOAP_FMAC3 web__saveVehicleInfo * SOAP_FMAC4 soap_in_web__saveVehicleInfo(struct soap*, const char*, web__saveVehicleInfo *, const char*);
SOAP_FMAC1 web__saveVehicleInfo * SOAP_FMAC2 soap_instantiate_web__saveVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline web__saveVehicleInfo * soap_new_web__saveVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline web__saveVehicleInfo * soap_new_req_web__saveVehicleInfo(
	struct soap *soap)
{
	web__saveVehicleInfo *_p = ::soap_new_web__saveVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveVehicleInfo * soap_new_set_web__saveVehicleInfo(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1,
	std::string *arg2,
	std::string *arg3,
	std::string *arg4,
	std::string *arg5,
	std::string *arg6)
{
	web__saveVehicleInfo *_p = ::soap_new_web__saveVehicleInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveVehicleInfo::arg0 = arg0;
		_p->web__saveVehicleInfo::arg1 = arg1;
		_p->web__saveVehicleInfo::arg2 = arg2;
		_p->web__saveVehicleInfo::arg3 = arg3;
		_p->web__saveVehicleInfo::arg4 = arg4;
		_p->web__saveVehicleInfo::arg5 = arg5;
		_p->web__saveVehicleInfo::arg6 = arg6;
	}
	return _p;
}

inline int soap_write_web__saveVehicleInfo(struct soap *soap, web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfo", p->soap_type() == SOAP_TYPE_web__saveVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveVehicleInfo(struct soap *soap, const char *URL, web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfo", p->soap_type() == SOAP_TYPE_web__saveVehicleInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveVehicleInfo(struct soap *soap, const char *URL, web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveVehicleInfo", p->soap_type() == SOAP_TYPE_web__saveVehicleInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveVehicleInfo * SOAP_FMAC4 soap_get_web__saveVehicleInfo(struct soap*, web__saveVehicleInfo *, const char*, const char*);

inline int soap_read_web__saveVehicleInfo(struct soap *soap, web__saveVehicleInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveVehicleInfo(struct soap *soap, const char *URL, web__saveVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveVehicleInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveVehicleInfo(struct soap *soap, web__saveVehicleInfo *p)
{
	if (::soap_read_web__saveVehicleInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__savePoundInfoResponse_DEFINED
#define SOAP_TYPE_web__savePoundInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__savePoundInfoResponse(struct soap*, const char*, int, const web__savePoundInfoResponse *, const char*);
SOAP_FMAC3 web__savePoundInfoResponse * SOAP_FMAC4 soap_in_web__savePoundInfoResponse(struct soap*, const char*, web__savePoundInfoResponse *, const char*);
SOAP_FMAC1 web__savePoundInfoResponse * SOAP_FMAC2 soap_instantiate_web__savePoundInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__savePoundInfoResponse * soap_new_web__savePoundInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__savePoundInfoResponse(soap, n, NULL, NULL, NULL);
}

inline web__savePoundInfoResponse * soap_new_req_web__savePoundInfoResponse(
	struct soap *soap)
{
	web__savePoundInfoResponse *_p = ::soap_new_web__savePoundInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__savePoundInfoResponse * soap_new_set_web__savePoundInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	web__savePoundInfoResponse *_p = ::soap_new_web__savePoundInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__savePoundInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__savePoundInfoResponse(struct soap *soap, web__savePoundInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__savePoundInfoResponse(struct soap *soap, const char *URL, web__savePoundInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__savePoundInfoResponse(struct soap *soap, const char *URL, web__savePoundInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__savePoundInfoResponse * SOAP_FMAC4 soap_get_web__savePoundInfoResponse(struct soap*, web__savePoundInfoResponse *, const char*, const char*);

inline int soap_read_web__savePoundInfoResponse(struct soap *soap, web__savePoundInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__savePoundInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__savePoundInfoResponse(struct soap *soap, const char *URL, web__savePoundInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__savePoundInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__savePoundInfoResponse(struct soap *soap, web__savePoundInfoResponse *p)
{
	if (::soap_read_web__savePoundInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__poundInfo_DEFINED
#define SOAP_TYPE_web__poundInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__poundInfo(struct soap*, const char*, int, const web__poundInfo *, const char*);
SOAP_FMAC3 web__poundInfo * SOAP_FMAC4 soap_in_web__poundInfo(struct soap*, const char*, web__poundInfo *, const char*);
SOAP_FMAC1 web__poundInfo * SOAP_FMAC2 soap_instantiate_web__poundInfo(struct soap*, int, const char*, const char*, size_t*);

inline web__poundInfo * soap_new_web__poundInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__poundInfo(soap, n, NULL, NULL, NULL);
}

inline web__poundInfo * soap_new_req_web__poundInfo(
	struct soap *soap,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	int c_USCOREPoundInfo_USCOREID,
	int c_USCOREVehicleInfo_USCOREID)
{
	web__poundInfo *_p = ::soap_new_web__poundInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__poundInfo::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__poundInfo::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__poundInfo::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__poundInfo::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__poundInfo::c_USCOREPoundInfo_USCOREID = c_USCOREPoundInfo_USCOREID;
		_p->web__poundInfo::c_USCOREVehicleInfo_USCOREID = c_USCOREVehicleInfo_USCOREID;
	}
	return _p;
}

inline web__poundInfo * soap_new_set_web__poundInfo(
	struct soap *soap,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	int c_USCOREPoundInfo_USCOREID,
	int c_USCOREVehicleInfo_USCOREID,
	std::string *carrierCompany,
	std::string *carrierCompanyValue,
	std::string *color,
	std::string *comments,
	std::string *deliverCompany,
	std::string *deliverCompanyValue,
	std::string *grossDate,
	std::string *grossWeight,
	std::string *m_USCOREProduct_USCOREID,
	std::string *m_USCOREProduct_USCOREIDValue,
	std::string *packingType,
	std::string *recipientCompany,
	std::string *recipientCompanyValue,
	std::string *tareDate,
	std::string *tareWeight,
	std::string *type)
{
	web__poundInfo *_p = ::soap_new_web__poundInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__poundInfo::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__poundInfo::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__poundInfo::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__poundInfo::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__poundInfo::c_USCOREPoundInfo_USCOREID = c_USCOREPoundInfo_USCOREID;
		_p->web__poundInfo::c_USCOREVehicleInfo_USCOREID = c_USCOREVehicleInfo_USCOREID;
		_p->web__poundInfo::carrierCompany = carrierCompany;
		_p->web__poundInfo::carrierCompanyValue = carrierCompanyValue;
		_p->web__poundInfo::color = color;
		_p->web__poundInfo::comments = comments;
		_p->web__poundInfo::deliverCompany = deliverCompany;
		_p->web__poundInfo::deliverCompanyValue = deliverCompanyValue;
		_p->web__poundInfo::grossDate = grossDate;
		_p->web__poundInfo::grossWeight = grossWeight;
		_p->web__poundInfo::m_USCOREProduct_USCOREID = m_USCOREProduct_USCOREID;
		_p->web__poundInfo::m_USCOREProduct_USCOREIDValue = m_USCOREProduct_USCOREIDValue;
		_p->web__poundInfo::packingType = packingType;
		_p->web__poundInfo::recipientCompany = recipientCompany;
		_p->web__poundInfo::recipientCompanyValue = recipientCompanyValue;
		_p->web__poundInfo::tareDate = tareDate;
		_p->web__poundInfo::tareWeight = tareWeight;
		_p->web__poundInfo::type = type;
	}
	return _p;
}

inline int soap_write_web__poundInfo(struct soap *soap, web__poundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:poundInfo", p->soap_type() == SOAP_TYPE_web__poundInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__poundInfo(struct soap *soap, const char *URL, web__poundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:poundInfo", p->soap_type() == SOAP_TYPE_web__poundInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__poundInfo(struct soap *soap, const char *URL, web__poundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:poundInfo", p->soap_type() == SOAP_TYPE_web__poundInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__poundInfo * SOAP_FMAC4 soap_get_web__poundInfo(struct soap*, web__poundInfo *, const char*, const char*);

inline int soap_read_web__poundInfo(struct soap *soap, web__poundInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__poundInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__poundInfo(struct soap *soap, const char *URL, web__poundInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__poundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__poundInfo(struct soap *soap, web__poundInfo *p)
{
	if (::soap_read_web__poundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__savePoundInfo_DEFINED
#define SOAP_TYPE_web__savePoundInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__savePoundInfo(struct soap*, const char*, int, const web__savePoundInfo *, const char*);
SOAP_FMAC3 web__savePoundInfo * SOAP_FMAC4 soap_in_web__savePoundInfo(struct soap*, const char*, web__savePoundInfo *, const char*);
SOAP_FMAC1 web__savePoundInfo * SOAP_FMAC2 soap_instantiate_web__savePoundInfo(struct soap*, int, const char*, const char*, size_t*);

inline web__savePoundInfo * soap_new_web__savePoundInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__savePoundInfo(soap, n, NULL, NULL, NULL);
}

inline web__savePoundInfo * soap_new_req_web__savePoundInfo(
	struct soap *soap)
{
	web__savePoundInfo *_p = ::soap_new_web__savePoundInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__savePoundInfo * soap_new_set_web__savePoundInfo(
	struct soap *soap,
	web__poundInfo *arg0)
{
	web__savePoundInfo *_p = ::soap_new_web__savePoundInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__savePoundInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_web__savePoundInfo(struct soap *soap, web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfo", p->soap_type() == SOAP_TYPE_web__savePoundInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__savePoundInfo(struct soap *soap, const char *URL, web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfo", p->soap_type() == SOAP_TYPE_web__savePoundInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__savePoundInfo(struct soap *soap, const char *URL, web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfo", p->soap_type() == SOAP_TYPE_web__savePoundInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__savePoundInfo * SOAP_FMAC4 soap_get_web__savePoundInfo(struct soap*, web__savePoundInfo *, const char*, const char*);

inline int soap_read_web__savePoundInfo(struct soap *soap, web__savePoundInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__savePoundInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__savePoundInfo(struct soap *soap, const char *URL, web__savePoundInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__savePoundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__savePoundInfo(struct soap *soap, web__savePoundInfo *p)
{
	if (::soap_read_web__savePoundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveGrainUserResponse_DEFINED
#define SOAP_TYPE_web__saveGrainUserResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveGrainUserResponse(struct soap*, const char*, int, const web__saveGrainUserResponse *, const char*);
SOAP_FMAC3 web__saveGrainUserResponse * SOAP_FMAC4 soap_in_web__saveGrainUserResponse(struct soap*, const char*, web__saveGrainUserResponse *, const char*);
SOAP_FMAC1 web__saveGrainUserResponse * SOAP_FMAC2 soap_instantiate_web__saveGrainUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__saveGrainUserResponse * soap_new_web__saveGrainUserResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveGrainUserResponse(soap, n, NULL, NULL, NULL);
}

inline web__saveGrainUserResponse * soap_new_req_web__saveGrainUserResponse(
	struct soap *soap)
{
	web__saveGrainUserResponse *_p = ::soap_new_web__saveGrainUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveGrainUserResponse * soap_new_set_web__saveGrainUserResponse(
	struct soap *soap,
	std::string *return_)
{
	web__saveGrainUserResponse *_p = ::soap_new_web__saveGrainUserResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveGrainUserResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__saveGrainUserResponse(struct soap *soap, web__saveGrainUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUserResponse", p->soap_type() == SOAP_TYPE_web__saveGrainUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveGrainUserResponse(struct soap *soap, const char *URL, web__saveGrainUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUserResponse", p->soap_type() == SOAP_TYPE_web__saveGrainUserResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveGrainUserResponse(struct soap *soap, const char *URL, web__saveGrainUserResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUserResponse", p->soap_type() == SOAP_TYPE_web__saveGrainUserResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveGrainUserResponse * SOAP_FMAC4 soap_get_web__saveGrainUserResponse(struct soap*, web__saveGrainUserResponse *, const char*, const char*);

inline int soap_read_web__saveGrainUserResponse(struct soap *soap, web__saveGrainUserResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveGrainUserResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveGrainUserResponse(struct soap *soap, const char *URL, web__saveGrainUserResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveGrainUserResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveGrainUserResponse(struct soap *soap, web__saveGrainUserResponse *p)
{
	if (::soap_read_web__saveGrainUserResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveGrainUser_DEFINED
#define SOAP_TYPE_web__saveGrainUser_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveGrainUser(struct soap*, const char*, int, const web__saveGrainUser *, const char*);
SOAP_FMAC3 web__saveGrainUser * SOAP_FMAC4 soap_in_web__saveGrainUser(struct soap*, const char*, web__saveGrainUser *, const char*);
SOAP_FMAC1 web__saveGrainUser * SOAP_FMAC2 soap_instantiate_web__saveGrainUser(struct soap*, int, const char*, const char*, size_t*);

inline web__saveGrainUser * soap_new_web__saveGrainUser(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveGrainUser(soap, n, NULL, NULL, NULL);
}

inline web__saveGrainUser * soap_new_req_web__saveGrainUser(
	struct soap *soap)
{
	web__saveGrainUser *_p = ::soap_new_web__saveGrainUser(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveGrainUser * soap_new_set_web__saveGrainUser(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1,
	std::string *arg2,
	std::string *arg3,
	std::string *arg4,
	std::string *arg5,
	std::string *arg6)
{
	web__saveGrainUser *_p = ::soap_new_web__saveGrainUser(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveGrainUser::arg0 = arg0;
		_p->web__saveGrainUser::arg1 = arg1;
		_p->web__saveGrainUser::arg2 = arg2;
		_p->web__saveGrainUser::arg3 = arg3;
		_p->web__saveGrainUser::arg4 = arg4;
		_p->web__saveGrainUser::arg5 = arg5;
		_p->web__saveGrainUser::arg6 = arg6;
	}
	return _p;
}

inline int soap_write_web__saveGrainUser(struct soap *soap, web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUser", p->soap_type() == SOAP_TYPE_web__saveGrainUser ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveGrainUser(struct soap *soap, const char *URL, web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUser", p->soap_type() == SOAP_TYPE_web__saveGrainUser ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveGrainUser(struct soap *soap, const char *URL, web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGrainUser", p->soap_type() == SOAP_TYPE_web__saveGrainUser ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveGrainUser * SOAP_FMAC4 soap_get_web__saveGrainUser(struct soap*, web__saveGrainUser *, const char*, const char*);

inline int soap_read_web__saveGrainUser(struct soap *soap, web__saveGrainUser *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveGrainUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveGrainUser(struct soap *soap, const char *URL, web__saveGrainUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveGrainUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveGrainUser(struct soap *soap, web__saveGrainUser *p)
{
	if (::soap_read_web__saveGrainUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveCheckingInfoResponse_DEFINED
#define SOAP_TYPE_web__saveCheckingInfoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveCheckingInfoResponse(struct soap*, const char*, int, const web__saveCheckingInfoResponse *, const char*);
SOAP_FMAC3 web__saveCheckingInfoResponse * SOAP_FMAC4 soap_in_web__saveCheckingInfoResponse(struct soap*, const char*, web__saveCheckingInfoResponse *, const char*);
SOAP_FMAC1 web__saveCheckingInfoResponse * SOAP_FMAC2 soap_instantiate_web__saveCheckingInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__saveCheckingInfoResponse * soap_new_web__saveCheckingInfoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveCheckingInfoResponse(soap, n, NULL, NULL, NULL);
}

inline web__saveCheckingInfoResponse * soap_new_req_web__saveCheckingInfoResponse(
	struct soap *soap)
{
	web__saveCheckingInfoResponse *_p = ::soap_new_web__saveCheckingInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveCheckingInfoResponse * soap_new_set_web__saveCheckingInfoResponse(
	struct soap *soap,
	std::string *return_)
{
	web__saveCheckingInfoResponse *_p = ::soap_new_web__saveCheckingInfoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveCheckingInfoResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__saveCheckingInfoResponse(struct soap *soap, web__saveCheckingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfoResponse", p->soap_type() == SOAP_TYPE_web__saveCheckingInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveCheckingInfoResponse(struct soap *soap, const char *URL, web__saveCheckingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfoResponse", p->soap_type() == SOAP_TYPE_web__saveCheckingInfoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveCheckingInfoResponse(struct soap *soap, const char *URL, web__saveCheckingInfoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfoResponse", p->soap_type() == SOAP_TYPE_web__saveCheckingInfoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveCheckingInfoResponse * SOAP_FMAC4 soap_get_web__saveCheckingInfoResponse(struct soap*, web__saveCheckingInfoResponse *, const char*, const char*);

inline int soap_read_web__saveCheckingInfoResponse(struct soap *soap, web__saveCheckingInfoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveCheckingInfoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveCheckingInfoResponse(struct soap *soap, const char *URL, web__saveCheckingInfoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveCheckingInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveCheckingInfoResponse(struct soap *soap, web__saveCheckingInfoResponse *p)
{
	if (::soap_read_web__saveCheckingInfoResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__checkingInfo_DEFINED
#define SOAP_TYPE_web__checkingInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__checkingInfo(struct soap*, const char*, int, const web__checkingInfo *, const char*);
SOAP_FMAC3 web__checkingInfo * SOAP_FMAC4 soap_in_web__checkingInfo(struct soap*, const char*, web__checkingInfo *, const char*);
SOAP_FMAC1 web__checkingInfo * SOAP_FMAC2 soap_instantiate_web__checkingInfo(struct soap*, int, const char*, const char*, size_t*);

inline web__checkingInfo * soap_new_web__checkingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__checkingInfo(soap, n, NULL, NULL, NULL);
}

inline web__checkingInfo * soap_new_req_web__checkingInfo(
	struct soap *soap,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	int c_USCOREcheckinginfo_USCOREid,
	int c_USCOREgporders_USCOREid,
	int c_USCOREvehicleinfo_USCOREid,
	bool issample,
	int m_USCOREproduct_USCOREid,
	int pipe)
{
	web__checkingInfo *_p = ::soap_new_web__checkingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__checkingInfo::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__checkingInfo::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__checkingInfo::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__checkingInfo::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__checkingInfo::c_USCOREcheckinginfo_USCOREid = c_USCOREcheckinginfo_USCOREid;
		_p->web__checkingInfo::c_USCOREgporders_USCOREid = c_USCOREgporders_USCOREid;
		_p->web__checkingInfo::c_USCOREvehicleinfo_USCOREid = c_USCOREvehicleinfo_USCOREid;
		_p->web__checkingInfo::issample = issample;
		_p->web__checkingInfo::m_USCOREproduct_USCOREid = m_USCOREproduct_USCOREid;
		_p->web__checkingInfo::pipe = pipe;
	}
	return _p;
}

inline web__checkingInfo * soap_new_set_web__checkingInfo(
	struct soap *soap,
	std::string *abreastimpurity,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	std::string *barcodevalue,
	std::string *bulkdensity,
	int c_USCOREcheckinginfo_USCOREid,
	int c_USCOREgporders_USCOREid,
	int c_USCOREvehicleinfo_USCOREid,
	std::string *comments,
	std::string *datecheck,
	std::string *fracture,
	std::string *heatloss,
	std::string *impurity,
	std::string *iscomplete,
	bool issample,
	int m_USCOREproduct_USCOREid,
	std::string *mildew,
	int pipe,
	std::string *sampleno,
	std::string *settlementcardid,
	std::string *temperature,
	std::string *tid,
	std::string *watercontent)
{
	web__checkingInfo *_p = ::soap_new_web__checkingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__checkingInfo::abreastimpurity = abreastimpurity;
		_p->web__checkingInfo::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__checkingInfo::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__checkingInfo::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__checkingInfo::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__checkingInfo::barcodevalue = barcodevalue;
		_p->web__checkingInfo::bulkdensity = bulkdensity;
		_p->web__checkingInfo::c_USCOREcheckinginfo_USCOREid = c_USCOREcheckinginfo_USCOREid;
		_p->web__checkingInfo::c_USCOREgporders_USCOREid = c_USCOREgporders_USCOREid;
		_p->web__checkingInfo::c_USCOREvehicleinfo_USCOREid = c_USCOREvehicleinfo_USCOREid;
		_p->web__checkingInfo::comments = comments;
		_p->web__checkingInfo::datecheck = datecheck;
		_p->web__checkingInfo::fracture = fracture;
		_p->web__checkingInfo::heatloss = heatloss;
		_p->web__checkingInfo::impurity = impurity;
		_p->web__checkingInfo::iscomplete = iscomplete;
		_p->web__checkingInfo::issample = issample;
		_p->web__checkingInfo::m_USCOREproduct_USCOREid = m_USCOREproduct_USCOREid;
		_p->web__checkingInfo::mildew = mildew;
		_p->web__checkingInfo::pipe = pipe;
		_p->web__checkingInfo::sampleno = sampleno;
		_p->web__checkingInfo::settlementcardid = settlementcardid;
		_p->web__checkingInfo::temperature = temperature;
		_p->web__checkingInfo::tid = tid;
		_p->web__checkingInfo::watercontent = watercontent;
	}
	return _p;
}

inline int soap_write_web__checkingInfo(struct soap *soap, web__checkingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:checkingInfo", p->soap_type() == SOAP_TYPE_web__checkingInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__checkingInfo(struct soap *soap, const char *URL, web__checkingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:checkingInfo", p->soap_type() == SOAP_TYPE_web__checkingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__checkingInfo(struct soap *soap, const char *URL, web__checkingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:checkingInfo", p->soap_type() == SOAP_TYPE_web__checkingInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__checkingInfo * SOAP_FMAC4 soap_get_web__checkingInfo(struct soap*, web__checkingInfo *, const char*, const char*);

inline int soap_read_web__checkingInfo(struct soap *soap, web__checkingInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__checkingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__checkingInfo(struct soap *soap, const char *URL, web__checkingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__checkingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__checkingInfo(struct soap *soap, web__checkingInfo *p)
{
	if (::soap_read_web__checkingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveCheckingInfo_DEFINED
#define SOAP_TYPE_web__saveCheckingInfo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveCheckingInfo(struct soap*, const char*, int, const web__saveCheckingInfo *, const char*);
SOAP_FMAC3 web__saveCheckingInfo * SOAP_FMAC4 soap_in_web__saveCheckingInfo(struct soap*, const char*, web__saveCheckingInfo *, const char*);
SOAP_FMAC1 web__saveCheckingInfo * SOAP_FMAC2 soap_instantiate_web__saveCheckingInfo(struct soap*, int, const char*, const char*, size_t*);

inline web__saveCheckingInfo * soap_new_web__saveCheckingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveCheckingInfo(soap, n, NULL, NULL, NULL);
}

inline web__saveCheckingInfo * soap_new_req_web__saveCheckingInfo(
	struct soap *soap)
{
	web__saveCheckingInfo *_p = ::soap_new_web__saveCheckingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveCheckingInfo * soap_new_set_web__saveCheckingInfo(
	struct soap *soap,
	web__checkingInfo *arg0)
{
	web__saveCheckingInfo *_p = ::soap_new_web__saveCheckingInfo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveCheckingInfo::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_web__saveCheckingInfo(struct soap *soap, web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfo", p->soap_type() == SOAP_TYPE_web__saveCheckingInfo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveCheckingInfo(struct soap *soap, const char *URL, web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfo", p->soap_type() == SOAP_TYPE_web__saveCheckingInfo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveCheckingInfo(struct soap *soap, const char *URL, web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveCheckingInfo", p->soap_type() == SOAP_TYPE_web__saveCheckingInfo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveCheckingInfo * SOAP_FMAC4 soap_get_web__saveCheckingInfo(struct soap*, web__saveCheckingInfo *, const char*, const char*);

inline int soap_read_web__saveCheckingInfo(struct soap *soap, web__saveCheckingInfo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveCheckingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveCheckingInfo(struct soap *soap, const char *URL, web__saveCheckingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveCheckingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveCheckingInfo(struct soap *soap, web__saveCheckingInfo *p)
{
	if (::soap_read_web__saveCheckingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__savePoundInfoAResponse_DEFINED
#define SOAP_TYPE_web__savePoundInfoAResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__savePoundInfoAResponse(struct soap*, const char*, int, const web__savePoundInfoAResponse *, const char*);
SOAP_FMAC3 web__savePoundInfoAResponse * SOAP_FMAC4 soap_in_web__savePoundInfoAResponse(struct soap*, const char*, web__savePoundInfoAResponse *, const char*);
SOAP_FMAC1 web__savePoundInfoAResponse * SOAP_FMAC2 soap_instantiate_web__savePoundInfoAResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__savePoundInfoAResponse * soap_new_web__savePoundInfoAResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__savePoundInfoAResponse(soap, n, NULL, NULL, NULL);
}

inline web__savePoundInfoAResponse * soap_new_req_web__savePoundInfoAResponse(
	struct soap *soap)
{
	web__savePoundInfoAResponse *_p = ::soap_new_web__savePoundInfoAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__savePoundInfoAResponse * soap_new_set_web__savePoundInfoAResponse(
	struct soap *soap,
	std::string *return_)
{
	web__savePoundInfoAResponse *_p = ::soap_new_web__savePoundInfoAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__savePoundInfoAResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__savePoundInfoAResponse(struct soap *soap, web__savePoundInfoAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoAResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoAResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__savePoundInfoAResponse(struct soap *soap, const char *URL, web__savePoundInfoAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoAResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoAResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__savePoundInfoAResponse(struct soap *soap, const char *URL, web__savePoundInfoAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoAResponse", p->soap_type() == SOAP_TYPE_web__savePoundInfoAResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__savePoundInfoAResponse * SOAP_FMAC4 soap_get_web__savePoundInfoAResponse(struct soap*, web__savePoundInfoAResponse *, const char*, const char*);

inline int soap_read_web__savePoundInfoAResponse(struct soap *soap, web__savePoundInfoAResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__savePoundInfoAResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__savePoundInfoAResponse(struct soap *soap, const char *URL, web__savePoundInfoAResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__savePoundInfoAResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__savePoundInfoAResponse(struct soap *soap, web__savePoundInfoAResponse *p)
{
	if (::soap_read_web__savePoundInfoAResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__savePoundInfoA_DEFINED
#define SOAP_TYPE_web__savePoundInfoA_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__savePoundInfoA(struct soap*, const char*, int, const web__savePoundInfoA *, const char*);
SOAP_FMAC3 web__savePoundInfoA * SOAP_FMAC4 soap_in_web__savePoundInfoA(struct soap*, const char*, web__savePoundInfoA *, const char*);
SOAP_FMAC1 web__savePoundInfoA * SOAP_FMAC2 soap_instantiate_web__savePoundInfoA(struct soap*, int, const char*, const char*, size_t*);

inline web__savePoundInfoA * soap_new_web__savePoundInfoA(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__savePoundInfoA(soap, n, NULL, NULL, NULL);
}

inline web__savePoundInfoA * soap_new_req_web__savePoundInfoA(
	struct soap *soap)
{
	web__savePoundInfoA *_p = ::soap_new_web__savePoundInfoA(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__savePoundInfoA * soap_new_set_web__savePoundInfoA(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1,
	std::string *arg2,
	std::string *arg3,
	std::string *arg4,
	std::string *arg5,
	std::string *arg6,
	std::string *arg7,
	std::string *arg8,
	std::string *arg9,
	std::string *arg10,
	std::string *arg11,
	std::string *arg12,
	std::string *arg13,
	std::string *arg14)
{
	web__savePoundInfoA *_p = ::soap_new_web__savePoundInfoA(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__savePoundInfoA::arg0 = arg0;
		_p->web__savePoundInfoA::arg1 = arg1;
		_p->web__savePoundInfoA::arg2 = arg2;
		_p->web__savePoundInfoA::arg3 = arg3;
		_p->web__savePoundInfoA::arg4 = arg4;
		_p->web__savePoundInfoA::arg5 = arg5;
		_p->web__savePoundInfoA::arg6 = arg6;
		_p->web__savePoundInfoA::arg7 = arg7;
		_p->web__savePoundInfoA::arg8 = arg8;
		_p->web__savePoundInfoA::arg9 = arg9;
		_p->web__savePoundInfoA::arg10 = arg10;
		_p->web__savePoundInfoA::arg11 = arg11;
		_p->web__savePoundInfoA::arg12 = arg12;
		_p->web__savePoundInfoA::arg13 = arg13;
		_p->web__savePoundInfoA::arg14 = arg14;
	}
	return _p;
}

inline int soap_write_web__savePoundInfoA(struct soap *soap, web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoA", p->soap_type() == SOAP_TYPE_web__savePoundInfoA ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__savePoundInfoA(struct soap *soap, const char *URL, web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoA", p->soap_type() == SOAP_TYPE_web__savePoundInfoA ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__savePoundInfoA(struct soap *soap, const char *URL, web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:savePoundInfoA", p->soap_type() == SOAP_TYPE_web__savePoundInfoA ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__savePoundInfoA * SOAP_FMAC4 soap_get_web__savePoundInfoA(struct soap*, web__savePoundInfoA *, const char*, const char*);

inline int soap_read_web__savePoundInfoA(struct soap *soap, web__savePoundInfoA *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__savePoundInfoA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__savePoundInfoA(struct soap *soap, const char *URL, web__savePoundInfoA *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__savePoundInfoA(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__savePoundInfoA(struct soap *soap, web__savePoundInfoA *p)
{
	if (::soap_read_web__savePoundInfoA(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__updatePasswordResponse_DEFINED
#define SOAP_TYPE_web__updatePasswordResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__updatePasswordResponse(struct soap*, const char*, int, const web__updatePasswordResponse *, const char*);
SOAP_FMAC3 web__updatePasswordResponse * SOAP_FMAC4 soap_in_web__updatePasswordResponse(struct soap*, const char*, web__updatePasswordResponse *, const char*);
SOAP_FMAC1 web__updatePasswordResponse * SOAP_FMAC2 soap_instantiate_web__updatePasswordResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__updatePasswordResponse * soap_new_web__updatePasswordResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__updatePasswordResponse(soap, n, NULL, NULL, NULL);
}

inline web__updatePasswordResponse * soap_new_req_web__updatePasswordResponse(
	struct soap *soap)
{
	web__updatePasswordResponse *_p = ::soap_new_web__updatePasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__updatePasswordResponse * soap_new_set_web__updatePasswordResponse(
	struct soap *soap,
	std::string *return_)
{
	web__updatePasswordResponse *_p = ::soap_new_web__updatePasswordResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__updatePasswordResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__updatePasswordResponse(struct soap *soap, web__updatePasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePasswordResponse", p->soap_type() == SOAP_TYPE_web__updatePasswordResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__updatePasswordResponse(struct soap *soap, const char *URL, web__updatePasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePasswordResponse", p->soap_type() == SOAP_TYPE_web__updatePasswordResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__updatePasswordResponse(struct soap *soap, const char *URL, web__updatePasswordResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePasswordResponse", p->soap_type() == SOAP_TYPE_web__updatePasswordResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__updatePasswordResponse * SOAP_FMAC4 soap_get_web__updatePasswordResponse(struct soap*, web__updatePasswordResponse *, const char*, const char*);

inline int soap_read_web__updatePasswordResponse(struct soap *soap, web__updatePasswordResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__updatePasswordResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__updatePasswordResponse(struct soap *soap, const char *URL, web__updatePasswordResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__updatePasswordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__updatePasswordResponse(struct soap *soap, web__updatePasswordResponse *p)
{
	if (::soap_read_web__updatePasswordResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__updatePassword_DEFINED
#define SOAP_TYPE_web__updatePassword_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__updatePassword(struct soap*, const char*, int, const web__updatePassword *, const char*);
SOAP_FMAC3 web__updatePassword * SOAP_FMAC4 soap_in_web__updatePassword(struct soap*, const char*, web__updatePassword *, const char*);
SOAP_FMAC1 web__updatePassword * SOAP_FMAC2 soap_instantiate_web__updatePassword(struct soap*, int, const char*, const char*, size_t*);

inline web__updatePassword * soap_new_web__updatePassword(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__updatePassword(soap, n, NULL, NULL, NULL);
}

inline web__updatePassword * soap_new_req_web__updatePassword(
	struct soap *soap)
{
	web__updatePassword *_p = ::soap_new_web__updatePassword(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__updatePassword * soap_new_set_web__updatePassword(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1,
	std::string *arg2)
{
	web__updatePassword *_p = ::soap_new_web__updatePassword(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__updatePassword::arg0 = arg0;
		_p->web__updatePassword::arg1 = arg1;
		_p->web__updatePassword::arg2 = arg2;
	}
	return _p;
}

inline int soap_write_web__updatePassword(struct soap *soap, web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePassword", p->soap_type() == SOAP_TYPE_web__updatePassword ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__updatePassword(struct soap *soap, const char *URL, web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePassword", p->soap_type() == SOAP_TYPE_web__updatePassword ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__updatePassword(struct soap *soap, const char *URL, web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:updatePassword", p->soap_type() == SOAP_TYPE_web__updatePassword ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__updatePassword * SOAP_FMAC4 soap_get_web__updatePassword(struct soap*, web__updatePassword *, const char*, const char*);

inline int soap_read_web__updatePassword(struct soap *soap, web__updatePassword *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__updatePassword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__updatePassword(struct soap *soap, const char *URL, web__updatePassword *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__updatePassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__updatePassword(struct soap *soap, web__updatePassword *p)
{
	if (::soap_read_web__updatePassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveSamplersResponse_DEFINED
#define SOAP_TYPE_web__saveSamplersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveSamplersResponse(struct soap*, const char*, int, const web__saveSamplersResponse *, const char*);
SOAP_FMAC3 web__saveSamplersResponse * SOAP_FMAC4 soap_in_web__saveSamplersResponse(struct soap*, const char*, web__saveSamplersResponse *, const char*);
SOAP_FMAC1 web__saveSamplersResponse * SOAP_FMAC2 soap_instantiate_web__saveSamplersResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__saveSamplersResponse * soap_new_web__saveSamplersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveSamplersResponse(soap, n, NULL, NULL, NULL);
}

inline web__saveSamplersResponse * soap_new_req_web__saveSamplersResponse(
	struct soap *soap)
{
	web__saveSamplersResponse *_p = ::soap_new_web__saveSamplersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveSamplersResponse * soap_new_set_web__saveSamplersResponse(
	struct soap *soap,
	std::string *return_)
{
	web__saveSamplersResponse *_p = ::soap_new_web__saveSamplersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveSamplersResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__saveSamplersResponse(struct soap *soap, web__saveSamplersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplersResponse", p->soap_type() == SOAP_TYPE_web__saveSamplersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveSamplersResponse(struct soap *soap, const char *URL, web__saveSamplersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplersResponse", p->soap_type() == SOAP_TYPE_web__saveSamplersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveSamplersResponse(struct soap *soap, const char *URL, web__saveSamplersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplersResponse", p->soap_type() == SOAP_TYPE_web__saveSamplersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveSamplersResponse * SOAP_FMAC4 soap_get_web__saveSamplersResponse(struct soap*, web__saveSamplersResponse *, const char*, const char*);

inline int soap_read_web__saveSamplersResponse(struct soap *soap, web__saveSamplersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveSamplersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveSamplersResponse(struct soap *soap, const char *URL, web__saveSamplersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveSamplersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveSamplersResponse(struct soap *soap, web__saveSamplersResponse *p)
{
	if (::soap_read_web__saveSamplersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveSamplers_DEFINED
#define SOAP_TYPE_web__saveSamplers_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveSamplers(struct soap*, const char*, int, const web__saveSamplers *, const char*);
SOAP_FMAC3 web__saveSamplers * SOAP_FMAC4 soap_in_web__saveSamplers(struct soap*, const char*, web__saveSamplers *, const char*);
SOAP_FMAC1 web__saveSamplers * SOAP_FMAC2 soap_instantiate_web__saveSamplers(struct soap*, int, const char*, const char*, size_t*);

inline web__saveSamplers * soap_new_web__saveSamplers(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveSamplers(soap, n, NULL, NULL, NULL);
}

inline web__saveSamplers * soap_new_req_web__saveSamplers(
	struct soap *soap)
{
	web__saveSamplers *_p = ::soap_new_web__saveSamplers(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveSamplers * soap_new_set_web__saveSamplers(
	struct soap *soap,
	std::string *arg0,
	std::string *arg1,
	std::string *arg2,
	std::string *arg3,
	std::string *arg4,
	std::string *arg5,
	std::string *arg6,
	std::string *arg7,
	std::string *arg8,
	std::string *arg9,
	std::string *arg10,
	std::string *arg11)
{
	web__saveSamplers *_p = ::soap_new_web__saveSamplers(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveSamplers::arg0 = arg0;
		_p->web__saveSamplers::arg1 = arg1;
		_p->web__saveSamplers::arg2 = arg2;
		_p->web__saveSamplers::arg3 = arg3;
		_p->web__saveSamplers::arg4 = arg4;
		_p->web__saveSamplers::arg5 = arg5;
		_p->web__saveSamplers::arg6 = arg6;
		_p->web__saveSamplers::arg7 = arg7;
		_p->web__saveSamplers::arg8 = arg8;
		_p->web__saveSamplers::arg9 = arg9;
		_p->web__saveSamplers::arg10 = arg10;
		_p->web__saveSamplers::arg11 = arg11;
	}
	return _p;
}

inline int soap_write_web__saveSamplers(struct soap *soap, web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplers", p->soap_type() == SOAP_TYPE_web__saveSamplers ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveSamplers(struct soap *soap, const char *URL, web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplers", p->soap_type() == SOAP_TYPE_web__saveSamplers ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveSamplers(struct soap *soap, const char *URL, web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveSamplers", p->soap_type() == SOAP_TYPE_web__saveSamplers ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveSamplers * SOAP_FMAC4 soap_get_web__saveSamplers(struct soap*, web__saveSamplers *, const char*, const char*);

inline int soap_read_web__saveSamplers(struct soap *soap, web__saveSamplers *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveSamplers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveSamplers(struct soap *soap, const char *URL, web__saveSamplers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveSamplers(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveSamplers(struct soap *soap, web__saveSamplers *p)
{
	if (::soap_read_web__saveSamplers(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveGPOrdersResponse_DEFINED
#define SOAP_TYPE_web__saveGPOrdersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveGPOrdersResponse(struct soap*, const char*, int, const web__saveGPOrdersResponse *, const char*);
SOAP_FMAC3 web__saveGPOrdersResponse * SOAP_FMAC4 soap_in_web__saveGPOrdersResponse(struct soap*, const char*, web__saveGPOrdersResponse *, const char*);
SOAP_FMAC1 web__saveGPOrdersResponse * SOAP_FMAC2 soap_instantiate_web__saveGPOrdersResponse(struct soap*, int, const char*, const char*, size_t*);

inline web__saveGPOrdersResponse * soap_new_web__saveGPOrdersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveGPOrdersResponse(soap, n, NULL, NULL, NULL);
}

inline web__saveGPOrdersResponse * soap_new_req_web__saveGPOrdersResponse(
	struct soap *soap)
{
	web__saveGPOrdersResponse *_p = ::soap_new_web__saveGPOrdersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveGPOrdersResponse * soap_new_set_web__saveGPOrdersResponse(
	struct soap *soap,
	std::string *return_)
{
	web__saveGPOrdersResponse *_p = ::soap_new_web__saveGPOrdersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveGPOrdersResponse::return_ = return_;
	}
	return _p;
}

inline int soap_write_web__saveGPOrdersResponse(struct soap *soap, web__saveGPOrdersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrdersResponse", p->soap_type() == SOAP_TYPE_web__saveGPOrdersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveGPOrdersResponse(struct soap *soap, const char *URL, web__saveGPOrdersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrdersResponse", p->soap_type() == SOAP_TYPE_web__saveGPOrdersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveGPOrdersResponse(struct soap *soap, const char *URL, web__saveGPOrdersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrdersResponse", p->soap_type() == SOAP_TYPE_web__saveGPOrdersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveGPOrdersResponse * SOAP_FMAC4 soap_get_web__saveGPOrdersResponse(struct soap*, web__saveGPOrdersResponse *, const char*, const char*);

inline int soap_read_web__saveGPOrdersResponse(struct soap *soap, web__saveGPOrdersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveGPOrdersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveGPOrdersResponse(struct soap *soap, const char *URL, web__saveGPOrdersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveGPOrdersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveGPOrdersResponse(struct soap *soap, web__saveGPOrdersResponse *p)
{
	if (::soap_read_web__saveGPOrdersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__gpOrders_DEFINED
#define SOAP_TYPE_web__gpOrders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__gpOrders(struct soap*, const char*, int, const web__gpOrders *, const char*);
SOAP_FMAC3 web__gpOrders * SOAP_FMAC4 soap_in_web__gpOrders(struct soap*, const char*, web__gpOrders *, const char*);
SOAP_FMAC1 web__gpOrders * SOAP_FMAC2 soap_instantiate_web__gpOrders(struct soap*, int, const char*, const char*, size_t*);

inline web__gpOrders * soap_new_web__gpOrders(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__gpOrders(soap, n, NULL, NULL, NULL);
}

inline web__gpOrders * soap_new_req_web__gpOrders(
	struct soap *soap,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	int c_USCOREcontract_USCOREid,
	int c_USCOREdoctype_USCOREid,
	int c_USCOREdoctypetarget_USCOREid,
	int c_USCOREgporders_USCOREid,
	int c_USCOREgrainuser_USCOREid,
	int c_USCORElocation_USCOREid,
	int c_USCOREtargetvehicle_USCOREid,
	int c_USCOREvehicleinfo_USCOREid,
	int c_USCOREvendor_USCOREid,
	int currentelectricity,
	bool isapproved,
	bool isvendor,
	bool processed,
	bool processing)
{
	web__gpOrders *_p = ::soap_new_web__gpOrders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__gpOrders::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__gpOrders::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__gpOrders::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__gpOrders::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__gpOrders::c_USCOREcontract_USCOREid = c_USCOREcontract_USCOREid;
		_p->web__gpOrders::c_USCOREdoctype_USCOREid = c_USCOREdoctype_USCOREid;
		_p->web__gpOrders::c_USCOREdoctypetarget_USCOREid = c_USCOREdoctypetarget_USCOREid;
		_p->web__gpOrders::c_USCOREgporders_USCOREid = c_USCOREgporders_USCOREid;
		_p->web__gpOrders::c_USCOREgrainuser_USCOREid = c_USCOREgrainuser_USCOREid;
		_p->web__gpOrders::c_USCORElocation_USCOREid = c_USCORElocation_USCOREid;
		_p->web__gpOrders::c_USCOREtargetvehicle_USCOREid = c_USCOREtargetvehicle_USCOREid;
		_p->web__gpOrders::c_USCOREvehicleinfo_USCOREid = c_USCOREvehicleinfo_USCOREid;
		_p->web__gpOrders::c_USCOREvendor_USCOREid = c_USCOREvendor_USCOREid;
		_p->web__gpOrders::currentelectricity = currentelectricity;
		_p->web__gpOrders::isapproved = isapproved;
		_p->web__gpOrders::isvendor = isvendor;
		_p->web__gpOrders::processed = processed;
		_p->web__gpOrders::processing = processing;
	}
	return _p;
}

inline web__gpOrders * soap_new_set_web__gpOrders(
	struct soap *soap,
	int ad_USCOREclient_USCOREid,
	int ad_USCOREorg_USCOREid,
	int ad_USCORErole_USCOREid,
	int ad_USCOREuser_USCOREid,
	std::string *address1,
	int c_USCOREcontract_USCOREid,
	int c_USCOREdoctype_USCOREid,
	int c_USCOREdoctypetarget_USCOREid,
	int c_USCOREgporders_USCOREid,
	int c_USCOREgrainuser_USCOREid,
	int c_USCORElocation_USCOREid,
	int c_USCOREtargetvehicle_USCOREid,
	int c_USCOREvehicleinfo_USCOREid,
	int c_USCOREvendor_USCOREid,
	std::string *color,
	int currentelectricity,
	std::string *docaction,
	std::string *docstatus,
	std::string *documentno,
	std::string *idcard,
	std::string *idcardbutton,
	bool isapproved,
	bool isvendor,
	std::string *license,
	std::string *packingtype,
	bool processed,
	bool processing,
	std::string *recheckbutton,
	std::string *settlementcardbutton,
	std::string *settlementcardid,
	std::string *tagbutton,
	std::string *tid,
	std::string *type,
	std::string *vehicleImage,
	std::string *vehiclebutton)
{
	web__gpOrders *_p = ::soap_new_web__gpOrders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__gpOrders::ad_USCOREclient_USCOREid = ad_USCOREclient_USCOREid;
		_p->web__gpOrders::ad_USCOREorg_USCOREid = ad_USCOREorg_USCOREid;
		_p->web__gpOrders::ad_USCORErole_USCOREid = ad_USCORErole_USCOREid;
		_p->web__gpOrders::ad_USCOREuser_USCOREid = ad_USCOREuser_USCOREid;
		_p->web__gpOrders::address1 = address1;
		_p->web__gpOrders::c_USCOREcontract_USCOREid = c_USCOREcontract_USCOREid;
		_p->web__gpOrders::c_USCOREdoctype_USCOREid = c_USCOREdoctype_USCOREid;
		_p->web__gpOrders::c_USCOREdoctypetarget_USCOREid = c_USCOREdoctypetarget_USCOREid;
		_p->web__gpOrders::c_USCOREgporders_USCOREid = c_USCOREgporders_USCOREid;
		_p->web__gpOrders::c_USCOREgrainuser_USCOREid = c_USCOREgrainuser_USCOREid;
		_p->web__gpOrders::c_USCORElocation_USCOREid = c_USCORElocation_USCOREid;
		_p->web__gpOrders::c_USCOREtargetvehicle_USCOREid = c_USCOREtargetvehicle_USCOREid;
		_p->web__gpOrders::c_USCOREvehicleinfo_USCOREid = c_USCOREvehicleinfo_USCOREid;
		_p->web__gpOrders::c_USCOREvendor_USCOREid = c_USCOREvendor_USCOREid;
		_p->web__gpOrders::color = color;
		_p->web__gpOrders::currentelectricity = currentelectricity;
		_p->web__gpOrders::docaction = docaction;
		_p->web__gpOrders::docstatus = docstatus;
		_p->web__gpOrders::documentno = documentno;
		_p->web__gpOrders::idcard = idcard;
		_p->web__gpOrders::idcardbutton = idcardbutton;
		_p->web__gpOrders::isapproved = isapproved;
		_p->web__gpOrders::isvendor = isvendor;
		_p->web__gpOrders::license = license;
		_p->web__gpOrders::packingtype = packingtype;
		_p->web__gpOrders::processed = processed;
		_p->web__gpOrders::processing = processing;
		_p->web__gpOrders::recheckbutton = recheckbutton;
		_p->web__gpOrders::settlementcardbutton = settlementcardbutton;
		_p->web__gpOrders::settlementcardid = settlementcardid;
		_p->web__gpOrders::tagbutton = tagbutton;
		_p->web__gpOrders::tid = tid;
		_p->web__gpOrders::type = type;
		_p->web__gpOrders::vehicleImage = vehicleImage;
		_p->web__gpOrders::vehiclebutton = vehiclebutton;
	}
	return _p;
}

inline int soap_write_web__gpOrders(struct soap *soap, web__gpOrders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:gpOrders", p->soap_type() == SOAP_TYPE_web__gpOrders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__gpOrders(struct soap *soap, const char *URL, web__gpOrders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:gpOrders", p->soap_type() == SOAP_TYPE_web__gpOrders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__gpOrders(struct soap *soap, const char *URL, web__gpOrders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:gpOrders", p->soap_type() == SOAP_TYPE_web__gpOrders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__gpOrders * SOAP_FMAC4 soap_get_web__gpOrders(struct soap*, web__gpOrders *, const char*, const char*);

inline int soap_read_web__gpOrders(struct soap *soap, web__gpOrders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__gpOrders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__gpOrders(struct soap *soap, const char *URL, web__gpOrders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__gpOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__gpOrders(struct soap *soap, web__gpOrders *p)
{
	if (::soap_read_web__gpOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_web__saveGPOrders_DEFINED
#define SOAP_TYPE_web__saveGPOrders_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_web__saveGPOrders(struct soap*, const char*, int, const web__saveGPOrders *, const char*);
SOAP_FMAC3 web__saveGPOrders * SOAP_FMAC4 soap_in_web__saveGPOrders(struct soap*, const char*, web__saveGPOrders *, const char*);
SOAP_FMAC1 web__saveGPOrders * SOAP_FMAC2 soap_instantiate_web__saveGPOrders(struct soap*, int, const char*, const char*, size_t*);

inline web__saveGPOrders * soap_new_web__saveGPOrders(struct soap *soap, int n = -1)
{
	return soap_instantiate_web__saveGPOrders(soap, n, NULL, NULL, NULL);
}

inline web__saveGPOrders * soap_new_req_web__saveGPOrders(
	struct soap *soap)
{
	web__saveGPOrders *_p = ::soap_new_web__saveGPOrders(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline web__saveGPOrders * soap_new_set_web__saveGPOrders(
	struct soap *soap,
	web__gpOrders *arg0)
{
	web__saveGPOrders *_p = ::soap_new_web__saveGPOrders(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->web__saveGPOrders::arg0 = arg0;
	}
	return _p;
}

inline int soap_write_web__saveGPOrders(struct soap *soap, web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrders", p->soap_type() == SOAP_TYPE_web__saveGPOrders ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_web__saveGPOrders(struct soap *soap, const char *URL, web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrders", p->soap_type() == SOAP_TYPE_web__saveGPOrders ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_web__saveGPOrders(struct soap *soap, const char *URL, web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "web:saveGPOrders", p->soap_type() == SOAP_TYPE_web__saveGPOrders ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 web__saveGPOrders * SOAP_FMAC4 soap_get_web__saveGPOrders(struct soap*, web__saveGPOrders *, const char*, const char*);

inline int soap_read_web__saveGPOrders(struct soap *soap, web__saveGPOrders *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_web__saveGPOrders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_web__saveGPOrders(struct soap *soap, const char *URL, web__saveGPOrders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_web__saveGPOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_web__saveGPOrders(struct soap *soap, web__saveGPOrders *p)
{
	if (::soap_read_web__saveGPOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___web__login_DEFINED
#define SOAP_TYPE___web__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__login(struct soap*, struct __web__login *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__login(struct soap*, const struct __web__login *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__login(struct soap*, const char*, int, const struct __web__login *, const char*);
SOAP_FMAC3 struct __web__login * SOAP_FMAC4 soap_in___web__login(struct soap*, const char*, struct __web__login *, const char*);
SOAP_FMAC1 struct __web__login * SOAP_FMAC2 soap_instantiate___web__login(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__login * soap_new___web__login(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__login(soap, n, NULL, NULL, NULL);
}

inline struct __web__login * soap_new_req___web__login(
	struct soap *soap)
{
	struct __web__login *_p = ::soap_new___web__login(soap);
	if (_p)
	{	::soap_default___web__login(soap, _p);
	}
	return _p;
}

inline struct __web__login * soap_new_set___web__login(
	struct soap *soap,
	web__login *web__login_)
{
	struct __web__login *_p = ::soap_new___web__login(soap);
	if (_p)
	{	::soap_default___web__login(soap, _p);
		_p->web__login_ = web__login_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__login(struct soap*, const struct __web__login *, const char*, const char*);

inline int soap_write___web__login(struct soap *soap, struct __web__login const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__login(soap, p), 0) || ::soap_put___web__login(soap, p, "-web:login", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__login(struct soap *soap, const char *URL, struct __web__login const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__login(soap, p), 0) || ::soap_put___web__login(soap, p, "-web:login", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__login(struct soap *soap, const char *URL, struct __web__login const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__login(soap, p), 0) || ::soap_put___web__login(soap, p, "-web:login", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__login * SOAP_FMAC4 soap_get___web__login(struct soap*, struct __web__login *, const char*, const char*);

inline int soap_read___web__login(struct soap *soap, struct __web__login *p)
{
	if (p)
	{	::soap_default___web__login(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__login(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__login(struct soap *soap, const char *URL, struct __web__login *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__login(struct soap *soap, struct __web__login *p)
{
	if (::soap_read___web__login(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__saveCheckingInfo_DEFINED
#define SOAP_TYPE___web__saveCheckingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__saveCheckingInfo(struct soap*, struct __web__saveCheckingInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__saveCheckingInfo(struct soap*, const struct __web__saveCheckingInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__saveCheckingInfo(struct soap*, const char*, int, const struct __web__saveCheckingInfo *, const char*);
SOAP_FMAC3 struct __web__saveCheckingInfo * SOAP_FMAC4 soap_in___web__saveCheckingInfo(struct soap*, const char*, struct __web__saveCheckingInfo *, const char*);
SOAP_FMAC1 struct __web__saveCheckingInfo * SOAP_FMAC2 soap_instantiate___web__saveCheckingInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__saveCheckingInfo * soap_new___web__saveCheckingInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__saveCheckingInfo(soap, n, NULL, NULL, NULL);
}

inline struct __web__saveCheckingInfo * soap_new_req___web__saveCheckingInfo(
	struct soap *soap)
{
	struct __web__saveCheckingInfo *_p = ::soap_new___web__saveCheckingInfo(soap);
	if (_p)
	{	::soap_default___web__saveCheckingInfo(soap, _p);
	}
	return _p;
}

inline struct __web__saveCheckingInfo * soap_new_set___web__saveCheckingInfo(
	struct soap *soap,
	web__saveCheckingInfo *web__saveCheckingInfo_)
{
	struct __web__saveCheckingInfo *_p = ::soap_new___web__saveCheckingInfo(soap);
	if (_p)
	{	::soap_default___web__saveCheckingInfo(soap, _p);
		_p->web__saveCheckingInfo_ = web__saveCheckingInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__saveCheckingInfo(struct soap*, const struct __web__saveCheckingInfo *, const char*, const char*);

inline int soap_write___web__saveCheckingInfo(struct soap *soap, struct __web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__saveCheckingInfo(soap, p), 0) || ::soap_put___web__saveCheckingInfo(soap, p, "-web:saveCheckingInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__saveCheckingInfo(struct soap *soap, const char *URL, struct __web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveCheckingInfo(soap, p), 0) || ::soap_put___web__saveCheckingInfo(soap, p, "-web:saveCheckingInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__saveCheckingInfo(struct soap *soap, const char *URL, struct __web__saveCheckingInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveCheckingInfo(soap, p), 0) || ::soap_put___web__saveCheckingInfo(soap, p, "-web:saveCheckingInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__saveCheckingInfo * SOAP_FMAC4 soap_get___web__saveCheckingInfo(struct soap*, struct __web__saveCheckingInfo *, const char*, const char*);

inline int soap_read___web__saveCheckingInfo(struct soap *soap, struct __web__saveCheckingInfo *p)
{
	if (p)
	{	::soap_default___web__saveCheckingInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__saveCheckingInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__saveCheckingInfo(struct soap *soap, const char *URL, struct __web__saveCheckingInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__saveCheckingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__saveCheckingInfo(struct soap *soap, struct __web__saveCheckingInfo *p)
{
	if (::soap_read___web__saveCheckingInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__saveSamplers_DEFINED
#define SOAP_TYPE___web__saveSamplers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__saveSamplers(struct soap*, struct __web__saveSamplers *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__saveSamplers(struct soap*, const struct __web__saveSamplers *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__saveSamplers(struct soap*, const char*, int, const struct __web__saveSamplers *, const char*);
SOAP_FMAC3 struct __web__saveSamplers * SOAP_FMAC4 soap_in___web__saveSamplers(struct soap*, const char*, struct __web__saveSamplers *, const char*);
SOAP_FMAC1 struct __web__saveSamplers * SOAP_FMAC2 soap_instantiate___web__saveSamplers(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__saveSamplers * soap_new___web__saveSamplers(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__saveSamplers(soap, n, NULL, NULL, NULL);
}

inline struct __web__saveSamplers * soap_new_req___web__saveSamplers(
	struct soap *soap)
{
	struct __web__saveSamplers *_p = ::soap_new___web__saveSamplers(soap);
	if (_p)
	{	::soap_default___web__saveSamplers(soap, _p);
	}
	return _p;
}

inline struct __web__saveSamplers * soap_new_set___web__saveSamplers(
	struct soap *soap,
	web__saveSamplers *web__saveSamplers_)
{
	struct __web__saveSamplers *_p = ::soap_new___web__saveSamplers(soap);
	if (_p)
	{	::soap_default___web__saveSamplers(soap, _p);
		_p->web__saveSamplers_ = web__saveSamplers_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__saveSamplers(struct soap*, const struct __web__saveSamplers *, const char*, const char*);

inline int soap_write___web__saveSamplers(struct soap *soap, struct __web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__saveSamplers(soap, p), 0) || ::soap_put___web__saveSamplers(soap, p, "-web:saveSamplers", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__saveSamplers(struct soap *soap, const char *URL, struct __web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveSamplers(soap, p), 0) || ::soap_put___web__saveSamplers(soap, p, "-web:saveSamplers", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__saveSamplers(struct soap *soap, const char *URL, struct __web__saveSamplers const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveSamplers(soap, p), 0) || ::soap_put___web__saveSamplers(soap, p, "-web:saveSamplers", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__saveSamplers * SOAP_FMAC4 soap_get___web__saveSamplers(struct soap*, struct __web__saveSamplers *, const char*, const char*);

inline int soap_read___web__saveSamplers(struct soap *soap, struct __web__saveSamplers *p)
{
	if (p)
	{	::soap_default___web__saveSamplers(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__saveSamplers(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__saveSamplers(struct soap *soap, const char *URL, struct __web__saveSamplers *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__saveSamplers(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__saveSamplers(struct soap *soap, struct __web__saveSamplers *p)
{
	if (::soap_read___web__saveSamplers(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__saveGPOrders_DEFINED
#define SOAP_TYPE___web__saveGPOrders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__saveGPOrders(struct soap*, struct __web__saveGPOrders *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__saveGPOrders(struct soap*, const struct __web__saveGPOrders *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__saveGPOrders(struct soap*, const char*, int, const struct __web__saveGPOrders *, const char*);
SOAP_FMAC3 struct __web__saveGPOrders * SOAP_FMAC4 soap_in___web__saveGPOrders(struct soap*, const char*, struct __web__saveGPOrders *, const char*);
SOAP_FMAC1 struct __web__saveGPOrders * SOAP_FMAC2 soap_instantiate___web__saveGPOrders(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__saveGPOrders * soap_new___web__saveGPOrders(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__saveGPOrders(soap, n, NULL, NULL, NULL);
}

inline struct __web__saveGPOrders * soap_new_req___web__saveGPOrders(
	struct soap *soap)
{
	struct __web__saveGPOrders *_p = ::soap_new___web__saveGPOrders(soap);
	if (_p)
	{	::soap_default___web__saveGPOrders(soap, _p);
	}
	return _p;
}

inline struct __web__saveGPOrders * soap_new_set___web__saveGPOrders(
	struct soap *soap,
	web__saveGPOrders *web__saveGPOrders_)
{
	struct __web__saveGPOrders *_p = ::soap_new___web__saveGPOrders(soap);
	if (_p)
	{	::soap_default___web__saveGPOrders(soap, _p);
		_p->web__saveGPOrders_ = web__saveGPOrders_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__saveGPOrders(struct soap*, const struct __web__saveGPOrders *, const char*, const char*);

inline int soap_write___web__saveGPOrders(struct soap *soap, struct __web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__saveGPOrders(soap, p), 0) || ::soap_put___web__saveGPOrders(soap, p, "-web:saveGPOrders", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__saveGPOrders(struct soap *soap, const char *URL, struct __web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveGPOrders(soap, p), 0) || ::soap_put___web__saveGPOrders(soap, p, "-web:saveGPOrders", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__saveGPOrders(struct soap *soap, const char *URL, struct __web__saveGPOrders const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveGPOrders(soap, p), 0) || ::soap_put___web__saveGPOrders(soap, p, "-web:saveGPOrders", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__saveGPOrders * SOAP_FMAC4 soap_get___web__saveGPOrders(struct soap*, struct __web__saveGPOrders *, const char*, const char*);

inline int soap_read___web__saveGPOrders(struct soap *soap, struct __web__saveGPOrders *p)
{
	if (p)
	{	::soap_default___web__saveGPOrders(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__saveGPOrders(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__saveGPOrders(struct soap *soap, const char *URL, struct __web__saveGPOrders *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__saveGPOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__saveGPOrders(struct soap *soap, struct __web__saveGPOrders *p)
{
	if (::soap_read___web__saveGPOrders(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__savePoundInfo_DEFINED
#define SOAP_TYPE___web__savePoundInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__savePoundInfo(struct soap*, struct __web__savePoundInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__savePoundInfo(struct soap*, const struct __web__savePoundInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__savePoundInfo(struct soap*, const char*, int, const struct __web__savePoundInfo *, const char*);
SOAP_FMAC3 struct __web__savePoundInfo * SOAP_FMAC4 soap_in___web__savePoundInfo(struct soap*, const char*, struct __web__savePoundInfo *, const char*);
SOAP_FMAC1 struct __web__savePoundInfo * SOAP_FMAC2 soap_instantiate___web__savePoundInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__savePoundInfo * soap_new___web__savePoundInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__savePoundInfo(soap, n, NULL, NULL, NULL);
}

inline struct __web__savePoundInfo * soap_new_req___web__savePoundInfo(
	struct soap *soap)
{
	struct __web__savePoundInfo *_p = ::soap_new___web__savePoundInfo(soap);
	if (_p)
	{	::soap_default___web__savePoundInfo(soap, _p);
	}
	return _p;
}

inline struct __web__savePoundInfo * soap_new_set___web__savePoundInfo(
	struct soap *soap,
	web__savePoundInfo *web__savePoundInfo_)
{
	struct __web__savePoundInfo *_p = ::soap_new___web__savePoundInfo(soap);
	if (_p)
	{	::soap_default___web__savePoundInfo(soap, _p);
		_p->web__savePoundInfo_ = web__savePoundInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__savePoundInfo(struct soap*, const struct __web__savePoundInfo *, const char*, const char*);

inline int soap_write___web__savePoundInfo(struct soap *soap, struct __web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__savePoundInfo(soap, p), 0) || ::soap_put___web__savePoundInfo(soap, p, "-web:savePoundInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__savePoundInfo(struct soap *soap, const char *URL, struct __web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__savePoundInfo(soap, p), 0) || ::soap_put___web__savePoundInfo(soap, p, "-web:savePoundInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__savePoundInfo(struct soap *soap, const char *URL, struct __web__savePoundInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__savePoundInfo(soap, p), 0) || ::soap_put___web__savePoundInfo(soap, p, "-web:savePoundInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__savePoundInfo * SOAP_FMAC4 soap_get___web__savePoundInfo(struct soap*, struct __web__savePoundInfo *, const char*, const char*);

inline int soap_read___web__savePoundInfo(struct soap *soap, struct __web__savePoundInfo *p)
{
	if (p)
	{	::soap_default___web__savePoundInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__savePoundInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__savePoundInfo(struct soap *soap, const char *URL, struct __web__savePoundInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__savePoundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__savePoundInfo(struct soap *soap, struct __web__savePoundInfo *p)
{
	if (::soap_read___web__savePoundInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__savePoundInfoA_DEFINED
#define SOAP_TYPE___web__savePoundInfoA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__savePoundInfoA(struct soap*, struct __web__savePoundInfoA *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__savePoundInfoA(struct soap*, const struct __web__savePoundInfoA *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__savePoundInfoA(struct soap*, const char*, int, const struct __web__savePoundInfoA *, const char*);
SOAP_FMAC3 struct __web__savePoundInfoA * SOAP_FMAC4 soap_in___web__savePoundInfoA(struct soap*, const char*, struct __web__savePoundInfoA *, const char*);
SOAP_FMAC1 struct __web__savePoundInfoA * SOAP_FMAC2 soap_instantiate___web__savePoundInfoA(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__savePoundInfoA * soap_new___web__savePoundInfoA(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__savePoundInfoA(soap, n, NULL, NULL, NULL);
}

inline struct __web__savePoundInfoA * soap_new_req___web__savePoundInfoA(
	struct soap *soap)
{
	struct __web__savePoundInfoA *_p = ::soap_new___web__savePoundInfoA(soap);
	if (_p)
	{	::soap_default___web__savePoundInfoA(soap, _p);
	}
	return _p;
}

inline struct __web__savePoundInfoA * soap_new_set___web__savePoundInfoA(
	struct soap *soap,
	web__savePoundInfoA *web__savePoundInfoA_)
{
	struct __web__savePoundInfoA *_p = ::soap_new___web__savePoundInfoA(soap);
	if (_p)
	{	::soap_default___web__savePoundInfoA(soap, _p);
		_p->web__savePoundInfoA_ = web__savePoundInfoA_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__savePoundInfoA(struct soap*, const struct __web__savePoundInfoA *, const char*, const char*);

inline int soap_write___web__savePoundInfoA(struct soap *soap, struct __web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__savePoundInfoA(soap, p), 0) || ::soap_put___web__savePoundInfoA(soap, p, "-web:savePoundInfoA", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__savePoundInfoA(struct soap *soap, const char *URL, struct __web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__savePoundInfoA(soap, p), 0) || ::soap_put___web__savePoundInfoA(soap, p, "-web:savePoundInfoA", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__savePoundInfoA(struct soap *soap, const char *URL, struct __web__savePoundInfoA const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__savePoundInfoA(soap, p), 0) || ::soap_put___web__savePoundInfoA(soap, p, "-web:savePoundInfoA", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__savePoundInfoA * SOAP_FMAC4 soap_get___web__savePoundInfoA(struct soap*, struct __web__savePoundInfoA *, const char*, const char*);

inline int soap_read___web__savePoundInfoA(struct soap *soap, struct __web__savePoundInfoA *p)
{
	if (p)
	{	::soap_default___web__savePoundInfoA(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__savePoundInfoA(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__savePoundInfoA(struct soap *soap, const char *URL, struct __web__savePoundInfoA *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__savePoundInfoA(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__savePoundInfoA(struct soap *soap, struct __web__savePoundInfoA *p)
{
	if (::soap_read___web__savePoundInfoA(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__saveGrainUser_DEFINED
#define SOAP_TYPE___web__saveGrainUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__saveGrainUser(struct soap*, struct __web__saveGrainUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__saveGrainUser(struct soap*, const struct __web__saveGrainUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__saveGrainUser(struct soap*, const char*, int, const struct __web__saveGrainUser *, const char*);
SOAP_FMAC3 struct __web__saveGrainUser * SOAP_FMAC4 soap_in___web__saveGrainUser(struct soap*, const char*, struct __web__saveGrainUser *, const char*);
SOAP_FMAC1 struct __web__saveGrainUser * SOAP_FMAC2 soap_instantiate___web__saveGrainUser(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__saveGrainUser * soap_new___web__saveGrainUser(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__saveGrainUser(soap, n, NULL, NULL, NULL);
}

inline struct __web__saveGrainUser * soap_new_req___web__saveGrainUser(
	struct soap *soap)
{
	struct __web__saveGrainUser *_p = ::soap_new___web__saveGrainUser(soap);
	if (_p)
	{	::soap_default___web__saveGrainUser(soap, _p);
	}
	return _p;
}

inline struct __web__saveGrainUser * soap_new_set___web__saveGrainUser(
	struct soap *soap,
	web__saveGrainUser *web__saveGrainUser_)
{
	struct __web__saveGrainUser *_p = ::soap_new___web__saveGrainUser(soap);
	if (_p)
	{	::soap_default___web__saveGrainUser(soap, _p);
		_p->web__saveGrainUser_ = web__saveGrainUser_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__saveGrainUser(struct soap*, const struct __web__saveGrainUser *, const char*, const char*);

inline int soap_write___web__saveGrainUser(struct soap *soap, struct __web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__saveGrainUser(soap, p), 0) || ::soap_put___web__saveGrainUser(soap, p, "-web:saveGrainUser", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__saveGrainUser(struct soap *soap, const char *URL, struct __web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveGrainUser(soap, p), 0) || ::soap_put___web__saveGrainUser(soap, p, "-web:saveGrainUser", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__saveGrainUser(struct soap *soap, const char *URL, struct __web__saveGrainUser const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveGrainUser(soap, p), 0) || ::soap_put___web__saveGrainUser(soap, p, "-web:saveGrainUser", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__saveGrainUser * SOAP_FMAC4 soap_get___web__saveGrainUser(struct soap*, struct __web__saveGrainUser *, const char*, const char*);

inline int soap_read___web__saveGrainUser(struct soap *soap, struct __web__saveGrainUser *p)
{
	if (p)
	{	::soap_default___web__saveGrainUser(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__saveGrainUser(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__saveGrainUser(struct soap *soap, const char *URL, struct __web__saveGrainUser *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__saveGrainUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__saveGrainUser(struct soap *soap, struct __web__saveGrainUser *p)
{
	if (::soap_read___web__saveGrainUser(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__saveVehicleInfo_DEFINED
#define SOAP_TYPE___web__saveVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__saveVehicleInfo(struct soap*, struct __web__saveVehicleInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__saveVehicleInfo(struct soap*, const struct __web__saveVehicleInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__saveVehicleInfo(struct soap*, const char*, int, const struct __web__saveVehicleInfo *, const char*);
SOAP_FMAC3 struct __web__saveVehicleInfo * SOAP_FMAC4 soap_in___web__saveVehicleInfo(struct soap*, const char*, struct __web__saveVehicleInfo *, const char*);
SOAP_FMAC1 struct __web__saveVehicleInfo * SOAP_FMAC2 soap_instantiate___web__saveVehicleInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__saveVehicleInfo * soap_new___web__saveVehicleInfo(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__saveVehicleInfo(soap, n, NULL, NULL, NULL);
}

inline struct __web__saveVehicleInfo * soap_new_req___web__saveVehicleInfo(
	struct soap *soap)
{
	struct __web__saveVehicleInfo *_p = ::soap_new___web__saveVehicleInfo(soap);
	if (_p)
	{	::soap_default___web__saveVehicleInfo(soap, _p);
	}
	return _p;
}

inline struct __web__saveVehicleInfo * soap_new_set___web__saveVehicleInfo(
	struct soap *soap,
	web__saveVehicleInfo *web__saveVehicleInfo_)
{
	struct __web__saveVehicleInfo *_p = ::soap_new___web__saveVehicleInfo(soap);
	if (_p)
	{	::soap_default___web__saveVehicleInfo(soap, _p);
		_p->web__saveVehicleInfo_ = web__saveVehicleInfo_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__saveVehicleInfo(struct soap*, const struct __web__saveVehicleInfo *, const char*, const char*);

inline int soap_write___web__saveVehicleInfo(struct soap *soap, struct __web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__saveVehicleInfo(soap, p), 0) || ::soap_put___web__saveVehicleInfo(soap, p, "-web:saveVehicleInfo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__saveVehicleInfo(struct soap *soap, const char *URL, struct __web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveVehicleInfo(soap, p), 0) || ::soap_put___web__saveVehicleInfo(soap, p, "-web:saveVehicleInfo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__saveVehicleInfo(struct soap *soap, const char *URL, struct __web__saveVehicleInfo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__saveVehicleInfo(soap, p), 0) || ::soap_put___web__saveVehicleInfo(soap, p, "-web:saveVehicleInfo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__saveVehicleInfo * SOAP_FMAC4 soap_get___web__saveVehicleInfo(struct soap*, struct __web__saveVehicleInfo *, const char*, const char*);

inline int soap_read___web__saveVehicleInfo(struct soap *soap, struct __web__saveVehicleInfo *p)
{
	if (p)
	{	::soap_default___web__saveVehicleInfo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__saveVehicleInfo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__saveVehicleInfo(struct soap *soap, const char *URL, struct __web__saveVehicleInfo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__saveVehicleInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__saveVehicleInfo(struct soap *soap, struct __web__saveVehicleInfo *p)
{
	if (::soap_read___web__saveVehicleInfo(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___web__updatePassword_DEFINED
#define SOAP_TYPE___web__updatePassword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___web__updatePassword(struct soap*, struct __web__updatePassword *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___web__updatePassword(struct soap*, const struct __web__updatePassword *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___web__updatePassword(struct soap*, const char*, int, const struct __web__updatePassword *, const char*);
SOAP_FMAC3 struct __web__updatePassword * SOAP_FMAC4 soap_in___web__updatePassword(struct soap*, const char*, struct __web__updatePassword *, const char*);
SOAP_FMAC1 struct __web__updatePassword * SOAP_FMAC2 soap_instantiate___web__updatePassword(struct soap*, int, const char*, const char*, size_t*);

inline struct __web__updatePassword * soap_new___web__updatePassword(struct soap *soap, int n = -1)
{
	return soap_instantiate___web__updatePassword(soap, n, NULL, NULL, NULL);
}

inline struct __web__updatePassword * soap_new_req___web__updatePassword(
	struct soap *soap)
{
	struct __web__updatePassword *_p = ::soap_new___web__updatePassword(soap);
	if (_p)
	{	::soap_default___web__updatePassword(soap, _p);
	}
	return _p;
}

inline struct __web__updatePassword * soap_new_set___web__updatePassword(
	struct soap *soap,
	web__updatePassword *web__updatePassword_)
{
	struct __web__updatePassword *_p = ::soap_new___web__updatePassword(soap);
	if (_p)
	{	::soap_default___web__updatePassword(soap, _p);
		_p->web__updatePassword_ = web__updatePassword_;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___web__updatePassword(struct soap*, const struct __web__updatePassword *, const char*, const char*);

inline int soap_write___web__updatePassword(struct soap *soap, struct __web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___web__updatePassword(soap, p), 0) || ::soap_put___web__updatePassword(soap, p, "-web:updatePassword", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___web__updatePassword(struct soap *soap, const char *URL, struct __web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__updatePassword(soap, p), 0) || ::soap_put___web__updatePassword(soap, p, "-web:updatePassword", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___web__updatePassword(struct soap *soap, const char *URL, struct __web__updatePassword const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___web__updatePassword(soap, p), 0) || ::soap_put___web__updatePassword(soap, p, "-web:updatePassword", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __web__updatePassword * SOAP_FMAC4 soap_get___web__updatePassword(struct soap*, struct __web__updatePassword *, const char*, const char*);

inline int soap_read___web__updatePassword(struct soap *soap, struct __web__updatePassword *p)
{
	if (p)
	{	::soap_default___web__updatePassword(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___web__updatePassword(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___web__updatePassword(struct soap *soap, const char *URL, struct __web__updatePassword *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___web__updatePassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___web__updatePassword(struct soap *soap, struct __web__updatePassword *p)
{
	if (::soap_read___web__updatePassword(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerToweb__login_DEFINED
#define SOAP_TYPE_PointerToweb__login_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__login(struct soap*, web__login *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__login(struct soap*, const char *, int, web__login *const*, const char *);
SOAP_FMAC3 web__login ** SOAP_FMAC4 soap_in_PointerToweb__login(struct soap*, const char*, web__login **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__login(struct soap*, web__login *const*, const char*, const char*);
SOAP_FMAC3 web__login ** SOAP_FMAC4 soap_get_PointerToweb__login(struct soap*, web__login **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__saveCheckingInfo_DEFINED
#define SOAP_TYPE_PointerToweb__saveCheckingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__saveCheckingInfo(struct soap*, web__saveCheckingInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__saveCheckingInfo(struct soap*, const char *, int, web__saveCheckingInfo *const*, const char *);
SOAP_FMAC3 web__saveCheckingInfo ** SOAP_FMAC4 soap_in_PointerToweb__saveCheckingInfo(struct soap*, const char*, web__saveCheckingInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__saveCheckingInfo(struct soap*, web__saveCheckingInfo *const*, const char*, const char*);
SOAP_FMAC3 web__saveCheckingInfo ** SOAP_FMAC4 soap_get_PointerToweb__saveCheckingInfo(struct soap*, web__saveCheckingInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__saveSamplers_DEFINED
#define SOAP_TYPE_PointerToweb__saveSamplers_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__saveSamplers(struct soap*, web__saveSamplers *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__saveSamplers(struct soap*, const char *, int, web__saveSamplers *const*, const char *);
SOAP_FMAC3 web__saveSamplers ** SOAP_FMAC4 soap_in_PointerToweb__saveSamplers(struct soap*, const char*, web__saveSamplers **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__saveSamplers(struct soap*, web__saveSamplers *const*, const char*, const char*);
SOAP_FMAC3 web__saveSamplers ** SOAP_FMAC4 soap_get_PointerToweb__saveSamplers(struct soap*, web__saveSamplers **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__saveGPOrders_DEFINED
#define SOAP_TYPE_PointerToweb__saveGPOrders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__saveGPOrders(struct soap*, web__saveGPOrders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__saveGPOrders(struct soap*, const char *, int, web__saveGPOrders *const*, const char *);
SOAP_FMAC3 web__saveGPOrders ** SOAP_FMAC4 soap_in_PointerToweb__saveGPOrders(struct soap*, const char*, web__saveGPOrders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__saveGPOrders(struct soap*, web__saveGPOrders *const*, const char*, const char*);
SOAP_FMAC3 web__saveGPOrders ** SOAP_FMAC4 soap_get_PointerToweb__saveGPOrders(struct soap*, web__saveGPOrders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__savePoundInfo_DEFINED
#define SOAP_TYPE_PointerToweb__savePoundInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__savePoundInfo(struct soap*, web__savePoundInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__savePoundInfo(struct soap*, const char *, int, web__savePoundInfo *const*, const char *);
SOAP_FMAC3 web__savePoundInfo ** SOAP_FMAC4 soap_in_PointerToweb__savePoundInfo(struct soap*, const char*, web__savePoundInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__savePoundInfo(struct soap*, web__savePoundInfo *const*, const char*, const char*);
SOAP_FMAC3 web__savePoundInfo ** SOAP_FMAC4 soap_get_PointerToweb__savePoundInfo(struct soap*, web__savePoundInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__savePoundInfoA_DEFINED
#define SOAP_TYPE_PointerToweb__savePoundInfoA_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__savePoundInfoA(struct soap*, web__savePoundInfoA *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__savePoundInfoA(struct soap*, const char *, int, web__savePoundInfoA *const*, const char *);
SOAP_FMAC3 web__savePoundInfoA ** SOAP_FMAC4 soap_in_PointerToweb__savePoundInfoA(struct soap*, const char*, web__savePoundInfoA **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__savePoundInfoA(struct soap*, web__savePoundInfoA *const*, const char*, const char*);
SOAP_FMAC3 web__savePoundInfoA ** SOAP_FMAC4 soap_get_PointerToweb__savePoundInfoA(struct soap*, web__savePoundInfoA **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__saveGrainUser_DEFINED
#define SOAP_TYPE_PointerToweb__saveGrainUser_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__saveGrainUser(struct soap*, web__saveGrainUser *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__saveGrainUser(struct soap*, const char *, int, web__saveGrainUser *const*, const char *);
SOAP_FMAC3 web__saveGrainUser ** SOAP_FMAC4 soap_in_PointerToweb__saveGrainUser(struct soap*, const char*, web__saveGrainUser **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__saveGrainUser(struct soap*, web__saveGrainUser *const*, const char*, const char*);
SOAP_FMAC3 web__saveGrainUser ** SOAP_FMAC4 soap_get_PointerToweb__saveGrainUser(struct soap*, web__saveGrainUser **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__saveVehicleInfo_DEFINED
#define SOAP_TYPE_PointerToweb__saveVehicleInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__saveVehicleInfo(struct soap*, web__saveVehicleInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__saveVehicleInfo(struct soap*, const char *, int, web__saveVehicleInfo *const*, const char *);
SOAP_FMAC3 web__saveVehicleInfo ** SOAP_FMAC4 soap_in_PointerToweb__saveVehicleInfo(struct soap*, const char*, web__saveVehicleInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__saveVehicleInfo(struct soap*, web__saveVehicleInfo *const*, const char*, const char*);
SOAP_FMAC3 web__saveVehicleInfo ** SOAP_FMAC4 soap_get_PointerToweb__saveVehicleInfo(struct soap*, web__saveVehicleInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__updatePassword_DEFINED
#define SOAP_TYPE_PointerToweb__updatePassword_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__updatePassword(struct soap*, web__updatePassword *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__updatePassword(struct soap*, const char *, int, web__updatePassword *const*, const char *);
SOAP_FMAC3 web__updatePassword ** SOAP_FMAC4 soap_in_PointerToweb__updatePassword(struct soap*, const char*, web__updatePassword **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__updatePassword(struct soap*, web__updatePassword *const*, const char*, const char*);
SOAP_FMAC3 web__updatePassword ** SOAP_FMAC4 soap_get_PointerToweb__updatePassword(struct soap*, web__updatePassword **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__user_DEFINED
#define SOAP_TYPE_PointerToweb__user_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__user(struct soap*, web__user *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__user(struct soap*, const char *, int, web__user *const*, const char *);
SOAP_FMAC3 web__user ** SOAP_FMAC4 soap_in_PointerToweb__user(struct soap*, const char*, web__user **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__user(struct soap*, web__user *const*, const char*, const char*);
SOAP_FMAC3 web__user ** SOAP_FMAC4 soap_get_PointerToweb__user(struct soap*, web__user **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__poundInfo_DEFINED
#define SOAP_TYPE_PointerToweb__poundInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__poundInfo(struct soap*, web__poundInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__poundInfo(struct soap*, const char *, int, web__poundInfo *const*, const char *);
SOAP_FMAC3 web__poundInfo ** SOAP_FMAC4 soap_in_PointerToweb__poundInfo(struct soap*, const char*, web__poundInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__poundInfo(struct soap*, web__poundInfo *const*, const char*, const char*);
SOAP_FMAC3 web__poundInfo ** SOAP_FMAC4 soap_get_PointerToweb__poundInfo(struct soap*, web__poundInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__checkingInfo_DEFINED
#define SOAP_TYPE_PointerToweb__checkingInfo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__checkingInfo(struct soap*, web__checkingInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__checkingInfo(struct soap*, const char *, int, web__checkingInfo *const*, const char *);
SOAP_FMAC3 web__checkingInfo ** SOAP_FMAC4 soap_in_PointerToweb__checkingInfo(struct soap*, const char*, web__checkingInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__checkingInfo(struct soap*, web__checkingInfo *const*, const char*, const char*);
SOAP_FMAC3 web__checkingInfo ** SOAP_FMAC4 soap_get_PointerToweb__checkingInfo(struct soap*, web__checkingInfo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToweb__gpOrders_DEFINED
#define SOAP_TYPE_PointerToweb__gpOrders_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToweb__gpOrders(struct soap*, web__gpOrders *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToweb__gpOrders(struct soap*, const char *, int, web__gpOrders *const*, const char *);
SOAP_FMAC3 web__gpOrders ** SOAP_FMAC4 soap_in_PointerToweb__gpOrders(struct soap*, const char*, web__gpOrders **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToweb__gpOrders(struct soap*, web__gpOrders *const*, const char*, const char*);
SOAP_FMAC3 web__gpOrders ** SOAP_FMAC4 soap_get_PointerToweb__gpOrders(struct soap*, web__gpOrders **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */

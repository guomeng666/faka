/* soapStub.h
   Generated by gSOAP 2.8.59 for mySap.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_web	"http://webservice.fy.ggzn.org/"

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"
#if GSOAP_VERSION != 20859
# error "GSOAP VERSION 20859 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class web__saveGPOrders;	/* mySap.h:146 */
class web__gpOrders;	/* mySap.h:149 */
class web__saveGPOrdersResponse;	/* mySap.h:152 */
class web__saveSamplers;	/* mySap.h:155 */
class web__saveSamplersResponse;	/* mySap.h:158 */
class web__updatePassword;	/* mySap.h:161 */
class web__updatePasswordResponse;	/* mySap.h:164 */
class web__savePoundInfoA;	/* mySap.h:167 */
class web__savePoundInfoAResponse;	/* mySap.h:170 */
class web__saveCheckingInfo;	/* mySap.h:173 */
class web__checkingInfo;	/* mySap.h:176 */
class web__saveCheckingInfoResponse;	/* mySap.h:179 */
class web__saveGrainUser;	/* mySap.h:182 */
class web__saveGrainUserResponse;	/* mySap.h:185 */
class web__savePoundInfo;	/* mySap.h:188 */
class web__poundInfo;	/* mySap.h:191 */
class web__savePoundInfoResponse;	/* mySap.h:194 */
class web__saveVehicleInfo;	/* mySap.h:197 */
class web__saveVehicleInfoResponse;	/* mySap.h:200 */
class web__login;	/* mySap.h:203 */
class web__loginResponse;	/* mySap.h:206 */
class web__user;	/* mySap.h:209 */
struct __web__updatePassword;	/* mySap.h:1144 */
struct __web__saveVehicleInfo;	/* mySap.h:1211 */
struct __web__saveGrainUser;	/* mySap.h:1278 */
struct __web__savePoundInfoA;	/* mySap.h:1345 */
struct __web__savePoundInfo;	/* mySap.h:1412 */
struct __web__saveGPOrders;	/* mySap.h:1479 */
struct __web__saveSamplers;	/* mySap.h:1546 */
struct __web__saveCheckingInfo;	/* mySap.h:1613 */
struct __web__login;	/* mySap.h:1680 */

/* mySap.h:146 */
#ifndef SOAP_TYPE_web__saveGPOrders
#define SOAP_TYPE_web__saveGPOrders (8)
/* complex XSD type 'web:saveGPOrders': */
class SOAP_CMAC web__saveGPOrders {
      public:
        /// Optional element 'arg0' of XSD type 'web:gpOrders'
        web__gpOrders *arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveGPOrders
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveGPOrders; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveGPOrders, default initialized and not managed by a soap context
        virtual web__saveGPOrders *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveGPOrders); }
      public:
        /// Constructor with initializations
        web__saveGPOrders() : arg0(), soap() { }
        virtual ~web__saveGPOrders() { }
        /// Friend allocator used by soap_new_web__saveGPOrders(struct soap*, int)
        friend SOAP_FMAC1 web__saveGPOrders * SOAP_FMAC2 soap_instantiate_web__saveGPOrders(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:149 */
#ifndef SOAP_TYPE_web__gpOrders
#define SOAP_TYPE_web__gpOrders (9)
/* complex XSD type 'web:gpOrders': */
class SOAP_CMAC web__gpOrders {
      public:
        /// Required element 'ad_client_id' of XSD type 'xsd:int'
        int ad_USCOREclient_USCOREid;
        /// Required element 'ad_org_id' of XSD type 'xsd:int'
        int ad_USCOREorg_USCOREid;
        /// Required element 'ad_role_id' of XSD type 'xsd:int'
        int ad_USCORErole_USCOREid;
        /// Required element 'ad_user_id' of XSD type 'xsd:int'
        int ad_USCOREuser_USCOREid;
        /// Optional element 'address1' of XSD type 'xsd:string'
        std::string *address1;
        /// Required element 'c_contract_id' of XSD type 'xsd:int'
        int c_USCOREcontract_USCOREid;
        /// Required element 'c_doctype_id' of XSD type 'xsd:int'
        int c_USCOREdoctype_USCOREid;
        /// Required element 'c_doctypetarget_id' of XSD type 'xsd:int'
        int c_USCOREdoctypetarget_USCOREid;
        /// Required element 'c_gporders_id' of XSD type 'xsd:int'
        int c_USCOREgporders_USCOREid;
        /// Required element 'c_grainuser_id' of XSD type 'xsd:int'
        int c_USCOREgrainuser_USCOREid;
        /// Required element 'c_location_id' of XSD type 'xsd:int'
        int c_USCORElocation_USCOREid;
        /// Required element 'c_targetvehicle_id' of XSD type 'xsd:int'
        int c_USCOREtargetvehicle_USCOREid;
        /// Required element 'c_vehicleinfo_id' of XSD type 'xsd:int'
        int c_USCOREvehicleinfo_USCOREid;
        /// Required element 'c_vendor_id' of XSD type 'xsd:int'
        int c_USCOREvendor_USCOREid;
        /// Optional element 'color' of XSD type 'xsd:string'
        std::string *color;
        /// Required element 'currentelectricity' of XSD type 'xsd:int'
        int currentelectricity;
        /// Optional element 'docaction' of XSD type 'xsd:string'
        std::string *docaction;
        /// Optional element 'docstatus' of XSD type 'xsd:string'
        std::string *docstatus;
        /// Optional element 'documentno' of XSD type 'xsd:string'
        std::string *documentno;
        /// Optional element 'idcard' of XSD type 'xsd:string'
        std::string *idcard;
        /// Optional element 'idcardbutton' of XSD type 'xsd:string'
        std::string *idcardbutton;
        /// Required element 'isapproved' of XSD type 'xsd:boolean'
        bool isapproved;
        /// Required element 'isvendor' of XSD type 'xsd:boolean'
        bool isvendor;
        /// Optional element 'license' of XSD type 'xsd:string'
        std::string *license;
        /// Optional element 'packingtype' of XSD type 'xsd:string'
        std::string *packingtype;
        /// Required element 'processed' of XSD type 'xsd:boolean'
        bool processed;
        /// Required element 'processing' of XSD type 'xsd:boolean'
        bool processing;
        /// Optional element 'recheckbutton' of XSD type 'xsd:string'
        std::string *recheckbutton;
        /// Optional element 'settlementcardbutton' of XSD type 'xsd:string'
        std::string *settlementcardbutton;
        /// Optional element 'settlementcardid' of XSD type 'xsd:string'
        std::string *settlementcardid;
        /// Optional element 'tagbutton' of XSD type 'xsd:string'
        std::string *tagbutton;
        /// Optional element 'tid' of XSD type 'xsd:string'
        std::string *tid;
        /// Optional element 'type' of XSD type 'xsd:string'
        std::string *type;
        /// Optional element 'vehicleImage' of XSD type 'xsd:string'
        std::string *vehicleImage;
        /// Optional element 'vehiclebutton' of XSD type 'xsd:string'
        std::string *vehiclebutton;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__gpOrders
        virtual long soap_type(void) const { return SOAP_TYPE_web__gpOrders; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__gpOrders, default initialized and not managed by a soap context
        virtual web__gpOrders *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__gpOrders); }
      public:
        /// Constructor with initializations
        web__gpOrders() : ad_USCOREclient_USCOREid(), ad_USCOREorg_USCOREid(), ad_USCORErole_USCOREid(), ad_USCOREuser_USCOREid(), address1(), c_USCOREcontract_USCOREid(), c_USCOREdoctype_USCOREid(), c_USCOREdoctypetarget_USCOREid(), c_USCOREgporders_USCOREid(), c_USCOREgrainuser_USCOREid(), c_USCORElocation_USCOREid(), c_USCOREtargetvehicle_USCOREid(), c_USCOREvehicleinfo_USCOREid(), c_USCOREvendor_USCOREid(), color(), currentelectricity(), docaction(), docstatus(), documentno(), idcard(), idcardbutton(), isapproved(), isvendor(), license(), packingtype(), processed(), processing(), recheckbutton(), settlementcardbutton(), settlementcardid(), tagbutton(), tid(), type(), vehicleImage(), vehiclebutton(), soap() { }
        virtual ~web__gpOrders() { }
        /// Friend allocator used by soap_new_web__gpOrders(struct soap*, int)
        friend SOAP_FMAC1 web__gpOrders * SOAP_FMAC2 soap_instantiate_web__gpOrders(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:152 */
#ifndef SOAP_TYPE_web__saveGPOrdersResponse
#define SOAP_TYPE_web__saveGPOrdersResponse (10)
/* complex XSD type 'web:saveGPOrdersResponse': */
class SOAP_CMAC web__saveGPOrdersResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveGPOrdersResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveGPOrdersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveGPOrdersResponse, default initialized and not managed by a soap context
        virtual web__saveGPOrdersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveGPOrdersResponse); }
      public:
        /// Constructor with initializations
        web__saveGPOrdersResponse() : return_(), soap() { }
        virtual ~web__saveGPOrdersResponse() { }
        /// Friend allocator used by soap_new_web__saveGPOrdersResponse(struct soap*, int)
        friend SOAP_FMAC1 web__saveGPOrdersResponse * SOAP_FMAC2 soap_instantiate_web__saveGPOrdersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:155 */
#ifndef SOAP_TYPE_web__saveSamplers
#define SOAP_TYPE_web__saveSamplers (11)
/* complex XSD type 'web:saveSamplers': */
class SOAP_CMAC web__saveSamplers {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Optional element 'arg2' of XSD type 'xsd:string'
        std::string *arg2;
        /// Optional element 'arg3' of XSD type 'xsd:string'
        std::string *arg3;
        /// Optional element 'arg4' of XSD type 'xsd:string'
        std::string *arg4;
        /// Optional element 'arg5' of XSD type 'xsd:string'
        std::string *arg5;
        /// Optional element 'arg6' of XSD type 'xsd:string'
        std::string *arg6;
        /// Optional element 'arg7' of XSD type 'xsd:string'
        std::string *arg7;
        /// Optional element 'arg8' of XSD type 'xsd:string'
        std::string *arg8;
        /// Optional element 'arg9' of XSD type 'xsd:string'
        std::string *arg9;
        /// Optional element 'arg10' of XSD type 'xsd:string'
        std::string *arg10;
        /// Optional element 'arg11' of XSD type 'xsd:string'
        std::string *arg11;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveSamplers
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveSamplers; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveSamplers, default initialized and not managed by a soap context
        virtual web__saveSamplers *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveSamplers); }
      public:
        /// Constructor with initializations
        web__saveSamplers() : arg0(), arg1(), arg2(), arg3(), arg4(), arg5(), arg6(), arg7(), arg8(), arg9(), arg10(), arg11(), soap() { }
        virtual ~web__saveSamplers() { }
        /// Friend allocator used by soap_new_web__saveSamplers(struct soap*, int)
        friend SOAP_FMAC1 web__saveSamplers * SOAP_FMAC2 soap_instantiate_web__saveSamplers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:158 */
#ifndef SOAP_TYPE_web__saveSamplersResponse
#define SOAP_TYPE_web__saveSamplersResponse (12)
/* complex XSD type 'web:saveSamplersResponse': */
class SOAP_CMAC web__saveSamplersResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveSamplersResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveSamplersResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveSamplersResponse, default initialized and not managed by a soap context
        virtual web__saveSamplersResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveSamplersResponse); }
      public:
        /// Constructor with initializations
        web__saveSamplersResponse() : return_(), soap() { }
        virtual ~web__saveSamplersResponse() { }
        /// Friend allocator used by soap_new_web__saveSamplersResponse(struct soap*, int)
        friend SOAP_FMAC1 web__saveSamplersResponse * SOAP_FMAC2 soap_instantiate_web__saveSamplersResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:161 */
#ifndef SOAP_TYPE_web__updatePassword
#define SOAP_TYPE_web__updatePassword (13)
/* complex XSD type 'web:updatePassword': */
class SOAP_CMAC web__updatePassword {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Optional element 'arg2' of XSD type 'xsd:string'
        std::string *arg2;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__updatePassword
        virtual long soap_type(void) const { return SOAP_TYPE_web__updatePassword; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__updatePassword, default initialized and not managed by a soap context
        virtual web__updatePassword *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__updatePassword); }
      public:
        /// Constructor with initializations
        web__updatePassword() : arg0(), arg1(), arg2(), soap() { }
        virtual ~web__updatePassword() { }
        /// Friend allocator used by soap_new_web__updatePassword(struct soap*, int)
        friend SOAP_FMAC1 web__updatePassword * SOAP_FMAC2 soap_instantiate_web__updatePassword(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:164 */
#ifndef SOAP_TYPE_web__updatePasswordResponse
#define SOAP_TYPE_web__updatePasswordResponse (14)
/* complex XSD type 'web:updatePasswordResponse': */
class SOAP_CMAC web__updatePasswordResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__updatePasswordResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__updatePasswordResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__updatePasswordResponse, default initialized and not managed by a soap context
        virtual web__updatePasswordResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__updatePasswordResponse); }
      public:
        /// Constructor with initializations
        web__updatePasswordResponse() : return_(), soap() { }
        virtual ~web__updatePasswordResponse() { }
        /// Friend allocator used by soap_new_web__updatePasswordResponse(struct soap*, int)
        friend SOAP_FMAC1 web__updatePasswordResponse * SOAP_FMAC2 soap_instantiate_web__updatePasswordResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:167 */
#ifndef SOAP_TYPE_web__savePoundInfoA
#define SOAP_TYPE_web__savePoundInfoA (15)
/* complex XSD type 'web:savePoundInfoA': */
class SOAP_CMAC web__savePoundInfoA {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Optional element 'arg2' of XSD type 'xsd:string'
        std::string *arg2;
        /// Optional element 'arg3' of XSD type 'xsd:string'
        std::string *arg3;
        /// Optional element 'arg4' of XSD type 'xsd:string'
        std::string *arg4;
        /// Optional element 'arg5' of XSD type 'xsd:string'
        std::string *arg5;
        /// Optional element 'arg6' of XSD type 'xsd:string'
        std::string *arg6;
        /// Optional element 'arg7' of XSD type 'xsd:string'
        std::string *arg7;
        /// Optional element 'arg8' of XSD type 'xsd:string'
        std::string *arg8;
        /// Optional element 'arg9' of XSD type 'xsd:string'
        std::string *arg9;
        /// Optional element 'arg10' of XSD type 'xsd:string'
        std::string *arg10;
        /// Optional element 'arg11' of XSD type 'xsd:string'
        std::string *arg11;
        /// Optional element 'arg12' of XSD type 'xsd:string'
        std::string *arg12;
        /// Optional element 'arg13' of XSD type 'xsd:string'
        std::string *arg13;
        /// Optional element 'arg14' of XSD type 'xsd:string'
        std::string *arg14;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__savePoundInfoA
        virtual long soap_type(void) const { return SOAP_TYPE_web__savePoundInfoA; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__savePoundInfoA, default initialized and not managed by a soap context
        virtual web__savePoundInfoA *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__savePoundInfoA); }
      public:
        /// Constructor with initializations
        web__savePoundInfoA() : arg0(), arg1(), arg2(), arg3(), arg4(), arg5(), arg6(), arg7(), arg8(), arg9(), arg10(), arg11(), arg12(), arg13(), arg14(), soap() { }
        virtual ~web__savePoundInfoA() { }
        /// Friend allocator used by soap_new_web__savePoundInfoA(struct soap*, int)
        friend SOAP_FMAC1 web__savePoundInfoA * SOAP_FMAC2 soap_instantiate_web__savePoundInfoA(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:170 */
#ifndef SOAP_TYPE_web__savePoundInfoAResponse
#define SOAP_TYPE_web__savePoundInfoAResponse (16)
/* complex XSD type 'web:savePoundInfoAResponse': */
class SOAP_CMAC web__savePoundInfoAResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__savePoundInfoAResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__savePoundInfoAResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__savePoundInfoAResponse, default initialized and not managed by a soap context
        virtual web__savePoundInfoAResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__savePoundInfoAResponse); }
      public:
        /// Constructor with initializations
        web__savePoundInfoAResponse() : return_(), soap() { }
        virtual ~web__savePoundInfoAResponse() { }
        /// Friend allocator used by soap_new_web__savePoundInfoAResponse(struct soap*, int)
        friend SOAP_FMAC1 web__savePoundInfoAResponse * SOAP_FMAC2 soap_instantiate_web__savePoundInfoAResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:173 */
#ifndef SOAP_TYPE_web__saveCheckingInfo
#define SOAP_TYPE_web__saveCheckingInfo (17)
/* complex XSD type 'web:saveCheckingInfo': */
class SOAP_CMAC web__saveCheckingInfo {
      public:
        /// Optional element 'arg0' of XSD type 'web:checkingInfo'
        web__checkingInfo *arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveCheckingInfo
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveCheckingInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveCheckingInfo, default initialized and not managed by a soap context
        virtual web__saveCheckingInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveCheckingInfo); }
      public:
        /// Constructor with initializations
        web__saveCheckingInfo() : arg0(), soap() { }
        virtual ~web__saveCheckingInfo() { }
        /// Friend allocator used by soap_new_web__saveCheckingInfo(struct soap*, int)
        friend SOAP_FMAC1 web__saveCheckingInfo * SOAP_FMAC2 soap_instantiate_web__saveCheckingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:176 */
#ifndef SOAP_TYPE_web__checkingInfo
#define SOAP_TYPE_web__checkingInfo (18)
/* complex XSD type 'web:checkingInfo': */
class SOAP_CMAC web__checkingInfo {
      public:
        /// Optional element 'abreastimpurity' of XSD type 'xsd:string'
        std::string *abreastimpurity;
        /// Required element 'ad_client_id' of XSD type 'xsd:int'
        int ad_USCOREclient_USCOREid;
        /// Required element 'ad_org_id' of XSD type 'xsd:int'
        int ad_USCOREorg_USCOREid;
        /// Required element 'ad_role_id' of XSD type 'xsd:int'
        int ad_USCORErole_USCOREid;
        /// Required element 'ad_user_id' of XSD type 'xsd:int'
        int ad_USCOREuser_USCOREid;
        /// Optional element 'barcodevalue' of XSD type 'xsd:string'
        std::string *barcodevalue;
        /// Optional element 'bulkdensity' of XSD type 'xsd:string'
        std::string *bulkdensity;
        /// Required element 'c_checkinginfo_id' of XSD type 'xsd:int'
        int c_USCOREcheckinginfo_USCOREid;
        /// Required element 'c_gporders_id' of XSD type 'xsd:int'
        int c_USCOREgporders_USCOREid;
        /// Required element 'c_vehicleinfo_id' of XSD type 'xsd:int'
        int c_USCOREvehicleinfo_USCOREid;
        /// Optional element 'comments' of XSD type 'xsd:string'
        std::string *comments;
        /// Optional element 'datecheck' of XSD type 'xsd:string'
        std::string *datecheck;
        /// Optional element 'fracture' of XSD type 'xsd:string'
        std::string *fracture;
        /// Optional element 'heatloss' of XSD type 'xsd:string'
        std::string *heatloss;
        /// Optional element 'impurity' of XSD type 'xsd:string'
        std::string *impurity;
        /// Optional element 'iscomplete' of XSD type 'xsd:string'
        std::string *iscomplete;
        /// Required element 'issample' of XSD type 'xsd:boolean'
        bool issample;
        /// Required element 'm_product_id' of XSD type 'xsd:int'
        int m_USCOREproduct_USCOREid;
        /// Optional element 'mildew' of XSD type 'xsd:string'
        std::string *mildew;
        /// Required element 'pipe' of XSD type 'xsd:int'
        int pipe;
        /// Optional element 'sampleno' of XSD type 'xsd:string'
        std::string *sampleno;
        /// Optional element 'settlementcardid' of XSD type 'xsd:string'
        std::string *settlementcardid;
        /// Optional element 'temperature' of XSD type 'xsd:string'
        std::string *temperature;
        /// Optional element 'tid' of XSD type 'xsd:string'
        std::string *tid;
        /// Optional element 'watercontent' of XSD type 'xsd:string'
        std::string *watercontent;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__checkingInfo
        virtual long soap_type(void) const { return SOAP_TYPE_web__checkingInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__checkingInfo, default initialized and not managed by a soap context
        virtual web__checkingInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__checkingInfo); }
      public:
        /// Constructor with initializations
        web__checkingInfo() : abreastimpurity(), ad_USCOREclient_USCOREid(), ad_USCOREorg_USCOREid(), ad_USCORErole_USCOREid(), ad_USCOREuser_USCOREid(), barcodevalue(), bulkdensity(), c_USCOREcheckinginfo_USCOREid(), c_USCOREgporders_USCOREid(), c_USCOREvehicleinfo_USCOREid(), comments(), datecheck(), fracture(), heatloss(), impurity(), iscomplete(), issample(), m_USCOREproduct_USCOREid(), mildew(), pipe(), sampleno(), settlementcardid(), temperature(), tid(), watercontent(), soap() { }
        virtual ~web__checkingInfo() { }
        /// Friend allocator used by soap_new_web__checkingInfo(struct soap*, int)
        friend SOAP_FMAC1 web__checkingInfo * SOAP_FMAC2 soap_instantiate_web__checkingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:179 */
#ifndef SOAP_TYPE_web__saveCheckingInfoResponse
#define SOAP_TYPE_web__saveCheckingInfoResponse (19)
/* complex XSD type 'web:saveCheckingInfoResponse': */
class SOAP_CMAC web__saveCheckingInfoResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveCheckingInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveCheckingInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveCheckingInfoResponse, default initialized and not managed by a soap context
        virtual web__saveCheckingInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveCheckingInfoResponse); }
      public:
        /// Constructor with initializations
        web__saveCheckingInfoResponse() : return_(), soap() { }
        virtual ~web__saveCheckingInfoResponse() { }
        /// Friend allocator used by soap_new_web__saveCheckingInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 web__saveCheckingInfoResponse * SOAP_FMAC2 soap_instantiate_web__saveCheckingInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:182 */
#ifndef SOAP_TYPE_web__saveGrainUser
#define SOAP_TYPE_web__saveGrainUser (20)
/* complex XSD type 'web:saveGrainUser': */
class SOAP_CMAC web__saveGrainUser {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Optional element 'arg2' of XSD type 'xsd:string'
        std::string *arg2;
        /// Optional element 'arg3' of XSD type 'xsd:string'
        std::string *arg3;
        /// Optional element 'arg4' of XSD type 'xsd:string'
        std::string *arg4;
        /// Optional element 'arg5' of XSD type 'xsd:string'
        std::string *arg5;
        /// Optional element 'arg6' of XSD type 'xsd:string'
        std::string *arg6;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveGrainUser
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveGrainUser; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveGrainUser, default initialized and not managed by a soap context
        virtual web__saveGrainUser *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveGrainUser); }
      public:
        /// Constructor with initializations
        web__saveGrainUser() : arg0(), arg1(), arg2(), arg3(), arg4(), arg5(), arg6(), soap() { }
        virtual ~web__saveGrainUser() { }
        /// Friend allocator used by soap_new_web__saveGrainUser(struct soap*, int)
        friend SOAP_FMAC1 web__saveGrainUser * SOAP_FMAC2 soap_instantiate_web__saveGrainUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:185 */
#ifndef SOAP_TYPE_web__saveGrainUserResponse
#define SOAP_TYPE_web__saveGrainUserResponse (21)
/* complex XSD type 'web:saveGrainUserResponse': */
class SOAP_CMAC web__saveGrainUserResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveGrainUserResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveGrainUserResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveGrainUserResponse, default initialized and not managed by a soap context
        virtual web__saveGrainUserResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveGrainUserResponse); }
      public:
        /// Constructor with initializations
        web__saveGrainUserResponse() : return_(), soap() { }
        virtual ~web__saveGrainUserResponse() { }
        /// Friend allocator used by soap_new_web__saveGrainUserResponse(struct soap*, int)
        friend SOAP_FMAC1 web__saveGrainUserResponse * SOAP_FMAC2 soap_instantiate_web__saveGrainUserResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:188 */
#ifndef SOAP_TYPE_web__savePoundInfo
#define SOAP_TYPE_web__savePoundInfo (22)
/* complex XSD type 'web:savePoundInfo': */
class SOAP_CMAC web__savePoundInfo {
      public:
        /// Optional element 'arg0' of XSD type 'web:poundInfo'
        web__poundInfo *arg0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__savePoundInfo
        virtual long soap_type(void) const { return SOAP_TYPE_web__savePoundInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__savePoundInfo, default initialized and not managed by a soap context
        virtual web__savePoundInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__savePoundInfo); }
      public:
        /// Constructor with initializations
        web__savePoundInfo() : arg0(), soap() { }
        virtual ~web__savePoundInfo() { }
        /// Friend allocator used by soap_new_web__savePoundInfo(struct soap*, int)
        friend SOAP_FMAC1 web__savePoundInfo * SOAP_FMAC2 soap_instantiate_web__savePoundInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:191 */
#ifndef SOAP_TYPE_web__poundInfo
#define SOAP_TYPE_web__poundInfo (23)
/* complex XSD type 'web:poundInfo': */
class SOAP_CMAC web__poundInfo {
      public:
        /// Required element 'ad_client_id' of XSD type 'xsd:int'
        int ad_USCOREclient_USCOREid;
        /// Required element 'ad_org_id' of XSD type 'xsd:int'
        int ad_USCOREorg_USCOREid;
        /// Required element 'ad_role_id' of XSD type 'xsd:int'
        int ad_USCORErole_USCOREid;
        /// Required element 'ad_user_id' of XSD type 'xsd:int'
        int ad_USCOREuser_USCOREid;
        /// Required element 'c_PoundInfo_ID' of XSD type 'xsd:int'
        int c_USCOREPoundInfo_USCOREID;
        /// Required element 'c_VehicleInfo_ID' of XSD type 'xsd:int'
        int c_USCOREVehicleInfo_USCOREID;
        /// Optional element 'carrierCompany' of XSD type 'xsd:string'
        std::string *carrierCompany;
        /// Optional element 'carrierCompanyValue' of XSD type 'xsd:string'
        std::string *carrierCompanyValue;
        /// Optional element 'color' of XSD type 'xsd:string'
        std::string *color;
        /// Optional element 'comments' of XSD type 'xsd:string'
        std::string *comments;
        /// Optional element 'deliverCompany' of XSD type 'xsd:string'
        std::string *deliverCompany;
        /// Optional element 'deliverCompanyValue' of XSD type 'xsd:string'
        std::string *deliverCompanyValue;
        /// Optional element 'grossDate' of XSD type 'xsd:string'
        std::string *grossDate;
        /// Optional element 'grossWeight' of XSD type 'xsd:string'
        std::string *grossWeight;
        /// Optional element 'm_Product_ID' of XSD type 'xsd:string'
        std::string *m_USCOREProduct_USCOREID;
        /// Optional element 'm_Product_IDValue' of XSD type 'xsd:string'
        std::string *m_USCOREProduct_USCOREIDValue;
        /// Optional element 'packingType' of XSD type 'xsd:string'
        std::string *packingType;
        /// Optional element 'recipientCompany' of XSD type 'xsd:string'
        std::string *recipientCompany;
        /// Optional element 'recipientCompanyValue' of XSD type 'xsd:string'
        std::string *recipientCompanyValue;
        /// Optional element 'tareDate' of XSD type 'xsd:string'
        std::string *tareDate;
        /// Optional element 'tareWeight' of XSD type 'xsd:string'
        std::string *tareWeight;
        /// Optional element 'type' of XSD type 'xsd:string'
        std::string *type;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__poundInfo
        virtual long soap_type(void) const { return SOAP_TYPE_web__poundInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__poundInfo, default initialized and not managed by a soap context
        virtual web__poundInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__poundInfo); }
      public:
        /// Constructor with initializations
        web__poundInfo() : ad_USCOREclient_USCOREid(), ad_USCOREorg_USCOREid(), ad_USCORErole_USCOREid(), ad_USCOREuser_USCOREid(), c_USCOREPoundInfo_USCOREID(), c_USCOREVehicleInfo_USCOREID(), carrierCompany(), carrierCompanyValue(), color(), comments(), deliverCompany(), deliverCompanyValue(), grossDate(), grossWeight(), m_USCOREProduct_USCOREID(), m_USCOREProduct_USCOREIDValue(), packingType(), recipientCompany(), recipientCompanyValue(), tareDate(), tareWeight(), type(), soap() { }
        virtual ~web__poundInfo() { }
        /// Friend allocator used by soap_new_web__poundInfo(struct soap*, int)
        friend SOAP_FMAC1 web__poundInfo * SOAP_FMAC2 soap_instantiate_web__poundInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:194 */
#ifndef SOAP_TYPE_web__savePoundInfoResponse
#define SOAP_TYPE_web__savePoundInfoResponse (24)
/* complex XSD type 'web:savePoundInfoResponse': */
class SOAP_CMAC web__savePoundInfoResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__savePoundInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__savePoundInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__savePoundInfoResponse, default initialized and not managed by a soap context
        virtual web__savePoundInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__savePoundInfoResponse); }
      public:
        /// Constructor with initializations
        web__savePoundInfoResponse() : return_(), soap() { }
        virtual ~web__savePoundInfoResponse() { }
        /// Friend allocator used by soap_new_web__savePoundInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 web__savePoundInfoResponse * SOAP_FMAC2 soap_instantiate_web__savePoundInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:197 */
#ifndef SOAP_TYPE_web__saveVehicleInfo
#define SOAP_TYPE_web__saveVehicleInfo (25)
/* complex XSD type 'web:saveVehicleInfo': */
class SOAP_CMAC web__saveVehicleInfo {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Optional element 'arg2' of XSD type 'xsd:string'
        std::string *arg2;
        /// Optional element 'arg3' of XSD type 'xsd:string'
        std::string *arg3;
        /// Optional element 'arg4' of XSD type 'xsd:string'
        std::string *arg4;
        /// Optional element 'arg5' of XSD type 'xsd:string'
        std::string *arg5;
        /// Optional element 'arg6' of XSD type 'xsd:string'
        std::string *arg6;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveVehicleInfo
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveVehicleInfo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveVehicleInfo, default initialized and not managed by a soap context
        virtual web__saveVehicleInfo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveVehicleInfo); }
      public:
        /// Constructor with initializations
        web__saveVehicleInfo() : arg0(), arg1(), arg2(), arg3(), arg4(), arg5(), arg6(), soap() { }
        virtual ~web__saveVehicleInfo() { }
        /// Friend allocator used by soap_new_web__saveVehicleInfo(struct soap*, int)
        friend SOAP_FMAC1 web__saveVehicleInfo * SOAP_FMAC2 soap_instantiate_web__saveVehicleInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:200 */
#ifndef SOAP_TYPE_web__saveVehicleInfoResponse
#define SOAP_TYPE_web__saveVehicleInfoResponse (26)
/* complex XSD type 'web:saveVehicleInfoResponse': */
class SOAP_CMAC web__saveVehicleInfoResponse {
      public:
        /// Optional element 'return' of XSD type 'xsd:string'
        std::string *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__saveVehicleInfoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__saveVehicleInfoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__saveVehicleInfoResponse, default initialized and not managed by a soap context
        virtual web__saveVehicleInfoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__saveVehicleInfoResponse); }
      public:
        /// Constructor with initializations
        web__saveVehicleInfoResponse() : return_(), soap() { }
        virtual ~web__saveVehicleInfoResponse() { }
        /// Friend allocator used by soap_new_web__saveVehicleInfoResponse(struct soap*, int)
        friend SOAP_FMAC1 web__saveVehicleInfoResponse * SOAP_FMAC2 soap_instantiate_web__saveVehicleInfoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:203 */
#ifndef SOAP_TYPE_web__login
#define SOAP_TYPE_web__login (27)
/* complex XSD type 'web:login': */
class SOAP_CMAC web__login {
      public:
        /// Optional element 'arg0' of XSD type 'xsd:string'
        std::string *arg0;
        /// Optional element 'arg1' of XSD type 'xsd:string'
        std::string *arg1;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__login
        virtual long soap_type(void) const { return SOAP_TYPE_web__login; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__login, default initialized and not managed by a soap context
        virtual web__login *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__login); }
      public:
        /// Constructor with initializations
        web__login() : arg0(), arg1(), soap() { }
        virtual ~web__login() { }
        /// Friend allocator used by soap_new_web__login(struct soap*, int)
        friend SOAP_FMAC1 web__login * SOAP_FMAC2 soap_instantiate_web__login(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:206 */
#ifndef SOAP_TYPE_web__loginResponse
#define SOAP_TYPE_web__loginResponse (28)
/* complex XSD type 'web:loginResponse': */
class SOAP_CMAC web__loginResponse {
      public:
        /// Optional element 'return' of XSD type 'web:user'
        web__user *return_;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__loginResponse
        virtual long soap_type(void) const { return SOAP_TYPE_web__loginResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__loginResponse, default initialized and not managed by a soap context
        virtual web__loginResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__loginResponse); }
      public:
        /// Constructor with initializations
        web__loginResponse() : return_(), soap() { }
        virtual ~web__loginResponse() { }
        /// Friend allocator used by soap_new_web__loginResponse(struct soap*, int)
        friend SOAP_FMAC1 web__loginResponse * SOAP_FMAC2 soap_instantiate_web__loginResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:209 */
#ifndef SOAP_TYPE_web__user
#define SOAP_TYPE_web__user (29)
/* complex XSD type 'web:user': */
class SOAP_CMAC web__user {
      public:
        /// Required element 'AD_Client_ID' of XSD type 'xsd:int'
        int AD_USCOREClient_USCOREID;
        /// Required element 'AD_Org_ID' of XSD type 'xsd:int'
        int AD_USCOREOrg_USCOREID;
        /// Required element 'AD_ROLE_ID' of XSD type 'xsd:int'
        int AD_USCOREROLE_USCOREID;
        /// Required element 'AD_USER_ID' of XSD type 'xsd:int'
        int AD_USCOREUSER_USCOREID;
        /// Optional element 'MESSAGE' of XSD type 'xsd:string'
        std::string *MESSAGE;
        /// Optional element 'NAME' of XSD type 'xsd:string'
        std::string *NAME;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_web__user
        virtual long soap_type(void) const { return SOAP_TYPE_web__user; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type web__user, default initialized and not managed by a soap context
        virtual web__user *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(web__user); }
      public:
        /// Constructor with initializations
        web__user() : AD_USCOREClient_USCOREID(), AD_USCOREOrg_USCOREID(), AD_USCOREROLE_USCOREID(), AD_USCOREUSER_USCOREID(), MESSAGE(), NAME(), soap() { }
        virtual ~web__user() { }
        /// Friend allocator used by soap_new_web__user(struct soap*, int)
        friend SOAP_FMAC1 web__user * SOAP_FMAC2 soap_instantiate_web__user(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1144 */
#ifndef SOAP_TYPE___web__updatePassword
#define SOAP_TYPE___web__updatePassword (41)
/* Wrapper: */
struct SOAP_CMAC __web__updatePassword {
      public:
        /** Optional element 'web:updatePassword' of XSD type 'web:updatePassword' */
        web__updatePassword *web__updatePassword_;
      public:
        /** Return unique type id SOAP_TYPE___web__updatePassword */
        long soap_type() const { return SOAP_TYPE___web__updatePassword; }
        /** Constructor with member initializations */
        __web__updatePassword() : web__updatePassword_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__updatePassword * SOAP_FMAC2 soap_instantiate___web__updatePassword(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1211 */
#ifndef SOAP_TYPE___web__saveVehicleInfo
#define SOAP_TYPE___web__saveVehicleInfo (45)
/* Wrapper: */
struct SOAP_CMAC __web__saveVehicleInfo {
      public:
        /** Optional element 'web:saveVehicleInfo' of XSD type 'web:saveVehicleInfo' */
        web__saveVehicleInfo *web__saveVehicleInfo_;
      public:
        /** Return unique type id SOAP_TYPE___web__saveVehicleInfo */
        long soap_type() const { return SOAP_TYPE___web__saveVehicleInfo; }
        /** Constructor with member initializations */
        __web__saveVehicleInfo() : web__saveVehicleInfo_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__saveVehicleInfo * SOAP_FMAC2 soap_instantiate___web__saveVehicleInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1278 */
#ifndef SOAP_TYPE___web__saveGrainUser
#define SOAP_TYPE___web__saveGrainUser (49)
/* Wrapper: */
struct SOAP_CMAC __web__saveGrainUser {
      public:
        /** Optional element 'web:saveGrainUser' of XSD type 'web:saveGrainUser' */
        web__saveGrainUser *web__saveGrainUser_;
      public:
        /** Return unique type id SOAP_TYPE___web__saveGrainUser */
        long soap_type() const { return SOAP_TYPE___web__saveGrainUser; }
        /** Constructor with member initializations */
        __web__saveGrainUser() : web__saveGrainUser_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__saveGrainUser * SOAP_FMAC2 soap_instantiate___web__saveGrainUser(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1345 */
#ifndef SOAP_TYPE___web__savePoundInfoA
#define SOAP_TYPE___web__savePoundInfoA (53)
/* Wrapper: */
struct SOAP_CMAC __web__savePoundInfoA {
      public:
        /** Optional element 'web:savePoundInfoA' of XSD type 'web:savePoundInfoA' */
        web__savePoundInfoA *web__savePoundInfoA_;
      public:
        /** Return unique type id SOAP_TYPE___web__savePoundInfoA */
        long soap_type() const { return SOAP_TYPE___web__savePoundInfoA; }
        /** Constructor with member initializations */
        __web__savePoundInfoA() : web__savePoundInfoA_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__savePoundInfoA * SOAP_FMAC2 soap_instantiate___web__savePoundInfoA(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1412 */
#ifndef SOAP_TYPE___web__savePoundInfo
#define SOAP_TYPE___web__savePoundInfo (57)
/* Wrapper: */
struct SOAP_CMAC __web__savePoundInfo {
      public:
        /** Optional element 'web:savePoundInfo' of XSD type 'web:savePoundInfo' */
        web__savePoundInfo *web__savePoundInfo_;
      public:
        /** Return unique type id SOAP_TYPE___web__savePoundInfo */
        long soap_type() const { return SOAP_TYPE___web__savePoundInfo; }
        /** Constructor with member initializations */
        __web__savePoundInfo() : web__savePoundInfo_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__savePoundInfo * SOAP_FMAC2 soap_instantiate___web__savePoundInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1479 */
#ifndef SOAP_TYPE___web__saveGPOrders
#define SOAP_TYPE___web__saveGPOrders (61)
/* Wrapper: */
struct SOAP_CMAC __web__saveGPOrders {
      public:
        /** Optional element 'web:saveGPOrders' of XSD type 'web:saveGPOrders' */
        web__saveGPOrders *web__saveGPOrders_;
      public:
        /** Return unique type id SOAP_TYPE___web__saveGPOrders */
        long soap_type() const { return SOAP_TYPE___web__saveGPOrders; }
        /** Constructor with member initializations */
        __web__saveGPOrders() : web__saveGPOrders_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__saveGPOrders * SOAP_FMAC2 soap_instantiate___web__saveGPOrders(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1546 */
#ifndef SOAP_TYPE___web__saveSamplers
#define SOAP_TYPE___web__saveSamplers (65)
/* Wrapper: */
struct SOAP_CMAC __web__saveSamplers {
      public:
        /** Optional element 'web:saveSamplers' of XSD type 'web:saveSamplers' */
        web__saveSamplers *web__saveSamplers_;
      public:
        /** Return unique type id SOAP_TYPE___web__saveSamplers */
        long soap_type() const { return SOAP_TYPE___web__saveSamplers; }
        /** Constructor with member initializations */
        __web__saveSamplers() : web__saveSamplers_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__saveSamplers * SOAP_FMAC2 soap_instantiate___web__saveSamplers(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1613 */
#ifndef SOAP_TYPE___web__saveCheckingInfo
#define SOAP_TYPE___web__saveCheckingInfo (69)
/* Wrapper: */
struct SOAP_CMAC __web__saveCheckingInfo {
      public:
        /** Optional element 'web:saveCheckingInfo' of XSD type 'web:saveCheckingInfo' */
        web__saveCheckingInfo *web__saveCheckingInfo_;
      public:
        /** Return unique type id SOAP_TYPE___web__saveCheckingInfo */
        long soap_type() const { return SOAP_TYPE___web__saveCheckingInfo; }
        /** Constructor with member initializations */
        __web__saveCheckingInfo() : web__saveCheckingInfo_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__saveCheckingInfo * SOAP_FMAC2 soap_instantiate___web__saveCheckingInfo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1680 */
#ifndef SOAP_TYPE___web__login
#define SOAP_TYPE___web__login (73)
/* Wrapper: */
struct SOAP_CMAC __web__login {
      public:
        /** Optional element 'web:login' of XSD type 'web:login' */
        web__login *web__login_;
      public:
        /** Return unique type id SOAP_TYPE___web__login */
        long soap_type() const { return SOAP_TYPE___web__login; }
        /** Constructor with member initializations */
        __web__login() : web__login_() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __web__login * SOAP_FMAC2 soap_instantiate___web__login(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* mySap.h:1787 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (74)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mySap.h:1787 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (75)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XSD type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mySap.h:1787 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (77)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_T assigned to __type */
        /** Do not create a cyclic data structure throught this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mySap.h:1787 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (80)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XSD type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* mySap.h:1787 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (81)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XSD type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XSD type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XSD type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XSD type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XSD type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XSD type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XSD type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XSD type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (34)
#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (32)
#endif

/* web__user has binding name 'web__user' for type 'web:user' */
#ifndef SOAP_TYPE_web__user
#define SOAP_TYPE_web__user (29)
#endif

/* web__loginResponse has binding name 'web__loginResponse' for type 'web:loginResponse' */
#ifndef SOAP_TYPE_web__loginResponse
#define SOAP_TYPE_web__loginResponse (28)
#endif

/* web__login has binding name 'web__login' for type 'web:login' */
#ifndef SOAP_TYPE_web__login
#define SOAP_TYPE_web__login (27)
#endif

/* web__saveVehicleInfoResponse has binding name 'web__saveVehicleInfoResponse' for type 'web:saveVehicleInfoResponse' */
#ifndef SOAP_TYPE_web__saveVehicleInfoResponse
#define SOAP_TYPE_web__saveVehicleInfoResponse (26)
#endif

/* web__saveVehicleInfo has binding name 'web__saveVehicleInfo' for type 'web:saveVehicleInfo' */
#ifndef SOAP_TYPE_web__saveVehicleInfo
#define SOAP_TYPE_web__saveVehicleInfo (25)
#endif

/* web__savePoundInfoResponse has binding name 'web__savePoundInfoResponse' for type 'web:savePoundInfoResponse' */
#ifndef SOAP_TYPE_web__savePoundInfoResponse
#define SOAP_TYPE_web__savePoundInfoResponse (24)
#endif

/* web__poundInfo has binding name 'web__poundInfo' for type 'web:poundInfo' */
#ifndef SOAP_TYPE_web__poundInfo
#define SOAP_TYPE_web__poundInfo (23)
#endif

/* web__savePoundInfo has binding name 'web__savePoundInfo' for type 'web:savePoundInfo' */
#ifndef SOAP_TYPE_web__savePoundInfo
#define SOAP_TYPE_web__savePoundInfo (22)
#endif

/* web__saveGrainUserResponse has binding name 'web__saveGrainUserResponse' for type 'web:saveGrainUserResponse' */
#ifndef SOAP_TYPE_web__saveGrainUserResponse
#define SOAP_TYPE_web__saveGrainUserResponse (21)
#endif

/* web__saveGrainUser has binding name 'web__saveGrainUser' for type 'web:saveGrainUser' */
#ifndef SOAP_TYPE_web__saveGrainUser
#define SOAP_TYPE_web__saveGrainUser (20)
#endif

/* web__saveCheckingInfoResponse has binding name 'web__saveCheckingInfoResponse' for type 'web:saveCheckingInfoResponse' */
#ifndef SOAP_TYPE_web__saveCheckingInfoResponse
#define SOAP_TYPE_web__saveCheckingInfoResponse (19)
#endif

/* web__checkingInfo has binding name 'web__checkingInfo' for type 'web:checkingInfo' */
#ifndef SOAP_TYPE_web__checkingInfo
#define SOAP_TYPE_web__checkingInfo (18)
#endif

/* web__saveCheckingInfo has binding name 'web__saveCheckingInfo' for type 'web:saveCheckingInfo' */
#ifndef SOAP_TYPE_web__saveCheckingInfo
#define SOAP_TYPE_web__saveCheckingInfo (17)
#endif

/* web__savePoundInfoAResponse has binding name 'web__savePoundInfoAResponse' for type 'web:savePoundInfoAResponse' */
#ifndef SOAP_TYPE_web__savePoundInfoAResponse
#define SOAP_TYPE_web__savePoundInfoAResponse (16)
#endif

/* web__savePoundInfoA has binding name 'web__savePoundInfoA' for type 'web:savePoundInfoA' */
#ifndef SOAP_TYPE_web__savePoundInfoA
#define SOAP_TYPE_web__savePoundInfoA (15)
#endif

/* web__updatePasswordResponse has binding name 'web__updatePasswordResponse' for type 'web:updatePasswordResponse' */
#ifndef SOAP_TYPE_web__updatePasswordResponse
#define SOAP_TYPE_web__updatePasswordResponse (14)
#endif

/* web__updatePassword has binding name 'web__updatePassword' for type 'web:updatePassword' */
#ifndef SOAP_TYPE_web__updatePassword
#define SOAP_TYPE_web__updatePassword (13)
#endif

/* web__saveSamplersResponse has binding name 'web__saveSamplersResponse' for type 'web:saveSamplersResponse' */
#ifndef SOAP_TYPE_web__saveSamplersResponse
#define SOAP_TYPE_web__saveSamplersResponse (12)
#endif

/* web__saveSamplers has binding name 'web__saveSamplers' for type 'web:saveSamplers' */
#ifndef SOAP_TYPE_web__saveSamplers
#define SOAP_TYPE_web__saveSamplers (11)
#endif

/* web__saveGPOrdersResponse has binding name 'web__saveGPOrdersResponse' for type 'web:saveGPOrdersResponse' */
#ifndef SOAP_TYPE_web__saveGPOrdersResponse
#define SOAP_TYPE_web__saveGPOrdersResponse (10)
#endif

/* web__gpOrders has binding name 'web__gpOrders' for type 'web:gpOrders' */
#ifndef SOAP_TYPE_web__gpOrders
#define SOAP_TYPE_web__gpOrders (9)
#endif

/* web__saveGPOrders has binding name 'web__saveGPOrders' for type 'web:saveGPOrders' */
#ifndef SOAP_TYPE_web__saveGPOrders
#define SOAP_TYPE_web__saveGPOrders (8)
#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (81)
#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (80)
#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (77)
#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (75)
#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (74)
#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (83)
#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (82)
#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (76)
#endif

/* web__login * has binding name 'PointerToweb__login' for type 'web:login' */
#ifndef SOAP_TYPE_PointerToweb__login
#define SOAP_TYPE_PointerToweb__login (70)
#endif

/* web__saveCheckingInfo * has binding name 'PointerToweb__saveCheckingInfo' for type 'web:saveCheckingInfo' */
#ifndef SOAP_TYPE_PointerToweb__saveCheckingInfo
#define SOAP_TYPE_PointerToweb__saveCheckingInfo (66)
#endif

/* web__saveSamplers * has binding name 'PointerToweb__saveSamplers' for type 'web:saveSamplers' */
#ifndef SOAP_TYPE_PointerToweb__saveSamplers
#define SOAP_TYPE_PointerToweb__saveSamplers (62)
#endif

/* web__saveGPOrders * has binding name 'PointerToweb__saveGPOrders' for type 'web:saveGPOrders' */
#ifndef SOAP_TYPE_PointerToweb__saveGPOrders
#define SOAP_TYPE_PointerToweb__saveGPOrders (58)
#endif

/* web__savePoundInfo * has binding name 'PointerToweb__savePoundInfo' for type 'web:savePoundInfo' */
#ifndef SOAP_TYPE_PointerToweb__savePoundInfo
#define SOAP_TYPE_PointerToweb__savePoundInfo (54)
#endif

/* web__savePoundInfoA * has binding name 'PointerToweb__savePoundInfoA' for type 'web:savePoundInfoA' */
#ifndef SOAP_TYPE_PointerToweb__savePoundInfoA
#define SOAP_TYPE_PointerToweb__savePoundInfoA (50)
#endif

/* web__saveGrainUser * has binding name 'PointerToweb__saveGrainUser' for type 'web:saveGrainUser' */
#ifndef SOAP_TYPE_PointerToweb__saveGrainUser
#define SOAP_TYPE_PointerToweb__saveGrainUser (46)
#endif

/* web__saveVehicleInfo * has binding name 'PointerToweb__saveVehicleInfo' for type 'web:saveVehicleInfo' */
#ifndef SOAP_TYPE_PointerToweb__saveVehicleInfo
#define SOAP_TYPE_PointerToweb__saveVehicleInfo (42)
#endif

/* web__updatePassword * has binding name 'PointerToweb__updatePassword' for type 'web:updatePassword' */
#ifndef SOAP_TYPE_PointerToweb__updatePassword
#define SOAP_TYPE_PointerToweb__updatePassword (38)
#endif

/* web__user * has binding name 'PointerToweb__user' for type 'web:user' */
#ifndef SOAP_TYPE_PointerToweb__user
#define SOAP_TYPE_PointerToweb__user (37)
#endif

/* web__poundInfo * has binding name 'PointerToweb__poundInfo' for type 'web:poundInfo' */
#ifndef SOAP_TYPE_PointerToweb__poundInfo
#define SOAP_TYPE_PointerToweb__poundInfo (36)
#endif

/* web__checkingInfo * has binding name 'PointerToweb__checkingInfo' for type 'web:checkingInfo' */
#ifndef SOAP_TYPE_PointerToweb__checkingInfo
#define SOAP_TYPE_PointerToweb__checkingInfo (35)
#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (33)
#endif

/* web__gpOrders * has binding name 'PointerToweb__gpOrders' for type 'web:gpOrders' */
#ifndef SOAP_TYPE_PointerToweb__gpOrders
#define SOAP_TYPE_PointerToweb__gpOrders (30)
#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (6)
#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (5)
#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stub Functions                                            *
 *                                                                            *
\******************************************************************************/

    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__updatePassword(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__updatePassword *web__updatePassword_, web__updatePasswordResponse &web__updatePasswordResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__saveVehicleInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__saveVehicleInfo *web__saveVehicleInfo_, web__saveVehicleInfoResponse &web__saveVehicleInfoResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__saveGrainUser(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__saveGrainUser *web__saveGrainUser_, web__saveGrainUserResponse &web__saveGrainUserResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__savePoundInfoA(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__savePoundInfoA *web__savePoundInfoA_, web__savePoundInfoAResponse &web__savePoundInfoAResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__savePoundInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__savePoundInfo *web__savePoundInfo_, web__savePoundInfoResponse &web__savePoundInfoResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__saveGPOrders(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__saveGPOrders *web__saveGPOrders_, web__saveGPOrdersResponse &web__saveGPOrdersResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__saveSamplers(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__saveSamplers *web__saveSamplers_, web__saveSamplersResponse &web__saveSamplersResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__saveCheckingInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__saveCheckingInfo *web__saveCheckingInfo_, web__saveCheckingInfoResponse &web__saveCheckingInfoResponse_);
    SOAP_FMAC5 int SOAP_FMAC6 soap_call___web__login(struct soap *soap, const char *soap_endpoint, const char *soap_action, web__login *web__login_, web__loginResponse &web__loginResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation '__web__updatePassword' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__updatePassword(struct soap*, web__updatePassword *web__updatePassword_, web__updatePasswordResponse &web__updatePasswordResponse_);
    /** Web service operation '__web__saveVehicleInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__saveVehicleInfo(struct soap*, web__saveVehicleInfo *web__saveVehicleInfo_, web__saveVehicleInfoResponse &web__saveVehicleInfoResponse_);
    /** Web service operation '__web__saveGrainUser' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__saveGrainUser(struct soap*, web__saveGrainUser *web__saveGrainUser_, web__saveGrainUserResponse &web__saveGrainUserResponse_);
    /** Web service operation '__web__savePoundInfoA' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__savePoundInfoA(struct soap*, web__savePoundInfoA *web__savePoundInfoA_, web__savePoundInfoAResponse &web__savePoundInfoAResponse_);
    /** Web service operation '__web__savePoundInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__savePoundInfo(struct soap*, web__savePoundInfo *web__savePoundInfo_, web__savePoundInfoResponse &web__savePoundInfoResponse_);
    /** Web service operation '__web__saveGPOrders' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__saveGPOrders(struct soap*, web__saveGPOrders *web__saveGPOrders_, web__saveGPOrdersResponse &web__saveGPOrdersResponse_);
    /** Web service operation '__web__saveSamplers' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__saveSamplers(struct soap*, web__saveSamplers *web__saveSamplers_, web__saveSamplersResponse &web__saveSamplersResponse_);
    /** Web service operation '__web__saveCheckingInfo' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__saveCheckingInfo(struct soap*, web__saveCheckingInfo *web__saveCheckingInfo_, web__saveCheckingInfoResponse &web__saveCheckingInfoResponse_);
    /** Web service operation '__web__login' (returns SOAP_OK or error code) */
    SOAP_FMAC5 int SOAP_FMAC6 __web__login(struct soap*, web__login *web__login_, web__loginResponse &web__loginResponse_);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__updatePassword(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__saveVehicleInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__saveGrainUser(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__savePoundInfoA(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__savePoundInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__saveGPOrders(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__saveSamplers(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__saveCheckingInfo(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___web__login(struct soap*);

#endif

/* End of soapStub.h */
